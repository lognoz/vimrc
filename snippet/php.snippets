snippet _ "Lookup a message in the current domain" i
_(${1:msgid})
endsnippet

snippet abs "Absolute value" i
abs(${1:number})
endsnippet

snippet acos "Arc cosine" i
acos(${1:number})
endsnippet

snippet acosh "Inverse hyperbolic cosine" i
acosh(${1:number})
endsnippet

snippet addcslashes "Quote string with slashes in a C style" i
addcslashes(${1:str}, ${2:charlist})
endsnippet

snippet addslashes "Quote string with slashes" i
addslashes(${1:str})
endsnippet

snippet array_change_key_case "Changes the case of all keys in an array" i
array_change_key_case(${1:input}${2:, ${3:case}})
endsnippet

snippet array_chunk "Split an array into chunks" i
array_chunk(${1:arg}, ${2:size}${3:, ${4:preserve_keys}})
endsnippet

snippet array_column "Return the values from a single column in the input array" i
array_column(${1:arg}, ${2:column_key}${3:, ${4:index_key}})
endsnippet

snippet array_combine "Creates an array by using one array for keys and another for its values" i
array_combine(${1:keys}, ${2:values})
endsnippet

snippet array_count_values "Counts all the values of an array" i
array_count_values(${1:arg})
endsnippet

snippet array_diff "Computes the difference of arrays" i
array_diff(${1:arr1}, ${2:arrays})
endsnippet

snippet array_diff_assoc "Computes the difference of arrays with additional index check" i
array_diff_assoc(${1:arr1}, ${2:arrays})
endsnippet

snippet array_diff_key "Computes the difference of arrays using keys for comparison" i
array_diff_key(${1:arr1}, ${2:arrays})
endsnippet

snippet array_diff_uassoc "Computes the difference of arrays with additional index check which is performed by a user supplied callback function" i
array_diff_uassoc(${1:arr1}, ${2:arr2}, ${3:callback_data_comp_func})
endsnippet

snippet array_diff_ukey "Computes the difference of arrays using a callback function on the keys for comparison" i
array_diff_ukey(${1:arr1}, ${2:arr2}, ${3:callback_key_comp_func})
endsnippet

snippet array_fill "Fill an array with values" i
array_fill(${1:start_key}, ${2:num}, ${3:val})
endsnippet

snippet array_fill_keys "Fill an array with values, specifying keys" i
array_fill_keys(${1:keys}, ${2:val})
endsnippet

snippet array_filter "Filters elements of an array using a callback function" i
array_filter(${1:arg}${2:, ${3:callback}${4:, ${5:use_keys}}})
endsnippet

snippet array_flip "Exchanges all keys with their associated values in an array" i
array_flip(${1:arg})
endsnippet

snippet array_intersect "Computes the intersection of arrays" i
array_intersect(${1:arr1}, ${2:arrays})
endsnippet

snippet array_intersect_assoc "Computes the intersection of arrays with additional index check" i
array_intersect_assoc(${1:arr1}, ${2:arrays})
endsnippet

snippet array_intersect_key "Computes the intersection of arrays using keys for comparison" i
array_intersect_key(${1:arr1}, ${2:arrays})
endsnippet

snippet array_intersect_uassoc "Computes the intersection of arrays with additional index check, compares indexes by a callback function" i
array_intersect_uassoc(${1:arr1}, ${2:arr2}, ${3:callback_key_compare_func})
endsnippet

snippet array_intersect_ukey "Computes the intersection of arrays using a callback function on the keys for comparison" i
array_intersect_ukey(${1:arr1}, ${2:arr2}, ${3:callback_key_compare_func})
endsnippet

snippet array_key_exists "Checks if the given key or index exists in the array" i
array_key_exists(${1:key}, ${2:search})
endsnippet

snippet array_key_first "Gets the first key of an array" i
array_key_first(${1:arg})
endsnippet

snippet array_key_last "Gets the last key of an array" i
array_key_last(${1:arg})
endsnippet

snippet array_keys "Return all the keys or a subset of the keys of an array" i
array_keys(${1:arg}${2:, ${3:search_value}${4:, ${5:strict}}})
endsnippet

snippet array_map "Applies the callback to the elements of the given arrays" i
array_map(${1:callback}, ${2:arrays})
endsnippet

snippet array_merge "Merge one or more arrays" i
array_merge(${1:arr1}${2:, ${3:arrays}})
endsnippet

snippet array_merge_recursive "Merge one or more arrays recursively" i
array_merge_recursive(${1:arr1}${2:, ${3:arrays}})
endsnippet

snippet array_multisort "Sort multiple or multi-dimensional arrays" i
array_multisort(${1:&arr1}${2:, ${3:&sort_order}${4:, ${5:&sort_flags}${6:, ${7:&arr2}}}})
endsnippet

snippet array_pad "Pad array to the specified length with a value" i
array_pad(${1:arg}, ${2:pad_size}, ${3:pad_value})
endsnippet

snippet array_pop "Pop the element off the end of array" i
array_pop(${1:&stack})
endsnippet

snippet array_product "Calculate the product of values in an array" i
array_product(${1:arg})
endsnippet

snippet array_push "Push one or more elements onto the end of array" i
array_push(${1:&stack}${2:, ${3:vars}})
endsnippet

snippet array_rand "Pick one or more random keys out of an array" i
array_rand(${1:arg}${2:, ${3:num_req}})
endsnippet

snippet array_reduce "Iteratively reduce the array to a single value using a callback function" i
array_reduce(${1:arg}, ${2:callback}${3:, ${4:initial}})
endsnippet

snippet array_replace "Replaces elements from passed arrays into the first array" i
array_replace(${1:arr1}${2:, ${3:arrays}})
endsnippet

snippet array_replace_recursive "Replaces elements from passed arrays into the first array recursively" i
array_replace_recursive(${1:arr1}${2:, ${3:arrays}})
endsnippet

snippet array_reverse "Return an array with elements in reverse order" i
array_reverse(${1:input}${2:, ${3:preserve_keys}})
endsnippet

snippet array_search "Searches the array for a given value and returns the first corresponding key if successful" i
array_search(${1:needle}, ${2:haystack}${3:, ${4:strict}})
endsnippet

snippet array_shift "Shift an element off the beginning of array" i
array_shift(${1:&stack})
endsnippet

snippet array_slice "Extract a slice of the array" i
array_slice(${1:arg}, ${2:offset}${3:, ${4:length}${5:, ${6:preserve_keys}}})
endsnippet

snippet array_splice "Remove a portion of the array and replace it with something else" i
array_splice(${1:&arg}, ${2:offset}${3:, ${4:length}${5:, ${6:replacement}}})
endsnippet

snippet array_sum "Calculate the sum of values in an array" i
array_sum(${1:arg})
endsnippet

snippet array_udiff "Computes the difference of arrays by using a callback function for data comparison" i
array_udiff(${1:arr1}, ${2:arr2}, ${3:callback_data_comp_func})
endsnippet

snippet array_udiff_assoc "Computes the difference of arrays with additional index check, compares data by a callback function" i
array_udiff_assoc(${1:arr1}, ${2:arr2}, ${3:callback_key_comp_func})
endsnippet

snippet array_udiff_uassoc "Computes the difference of arrays with additional index check, compares data and indexes by a callback function" i
array_udiff_uassoc(${1:arr1}, ${2:arr2}, ${3:callback_data_comp_func}, ${4:callback_key_comp_func})
endsnippet

snippet array_uintersect "Computes the intersection of arrays, compares data by a callback function" i
array_uintersect(${1:arr1}, ${2:arr2}, ${3:callback_data_compare_func})
endsnippet

snippet array_uintersect_assoc "Computes the intersection of arrays with additional index check, compares data by a callback function" i
array_uintersect_assoc(${1:arr1}, ${2:arr2}, ${3:callback_data_compare_func})
endsnippet

snippet array_uintersect_uassoc "Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions" i
array_uintersect_uassoc(${1:arr1}, ${2:arr2}, ${3:callback_data_compare_func}, ${4:callback_key_compare_func})
endsnippet

snippet array_unique "Removes duplicate values from an array" i
array_unique(${1:arg}${2:, ${3:flags}})
endsnippet

snippet array_unshift "Prepend one or more elements to the beginning of an array" i
array_unshift(${1:&stack}${2:, ${3:vars}})
endsnippet

snippet array_values "Return all the values of an array" i
array_values(${1:arg})
endsnippet

snippet array_walk "Apply a user supplied function to every member of an array" i
array_walk(${1:&input}, ${2:funcname}${3:, ${4:userdata}})
endsnippet

snippet array_walk_recursive "Apply a user function recursively to every member of an array" i
array_walk_recursive(${1:&input}, ${2:funcname}${3:, ${4:userdata}})
endsnippet

snippet arsort "Sort an array in reverse order and maintain index association" i
arsort(${1:&arg}${2:, ${3:sort_flags}})
endsnippet

snippet asin "Arc sine" i
asin(${1:number})
endsnippet

snippet asinh "Inverse hyperbolic sine" i
asinh(${1:number})
endsnippet

snippet asort "Sort an array and maintain index association" i
asort(${1:&arg}${2:, ${3:sort_flags}})
endsnippet

snippet assert "Checks if assertion is FALSE" i
assert(${1:assertion}${2:, ${3:description}})
endsnippet

snippet assert_options "Set/get the various assert flags" i
assert_options(${1:what}${2:, ${3:value}})
endsnippet

snippet atan "Arc tangent" i
atan(${1:number})
endsnippet

snippet atan2 "Arc tangent of two variables" i
atan2(${1:y}, ${2:x})
endsnippet

snippet atanh "Inverse hyperbolic tangent" i
atanh(${1:number})
endsnippet

snippet base64_decode "Decodes data encoded with MIME base64" i
base64_decode(${1:str}${2:, ${3:strict}})
endsnippet

snippet base64_encode "Encodes data with MIME base64" i
base64_encode(${1:str})
endsnippet

snippet base_convert "Convert a number between arbitrary bases" i
base_convert(${1:number}, ${2:frombase}, ${3:tobase})
endsnippet

snippet basename "Returns trailing name component of path" i
basename(${1:path}${2:, ${3:suffix}})
endsnippet

snippet bcadd "Add two arbitrary precision numbers" i
bcadd(${1:left_operand}, ${2:right_operand}${3:, ${4:scale}})
endsnippet

snippet bccomp "Compare two arbitrary precision numbers" i
bccomp(${1:left_operand}, ${2:right_operand}${3:, ${4:scale}})
endsnippet

snippet bcdiv "Divide two arbitrary precision numbers" i
bcdiv(${1:left_operand}, ${2:right_operand}${3:, ${4:scale}})
endsnippet

snippet bcmod "Get modulus of an arbitrary precision number" i
bcmod(${1:left_operand}, ${2:right_operand}${3:, ${4:scale}})
endsnippet

snippet bcmul "Multiply two arbitrary precision numbers" i
bcmul(${1:left_operand}, ${2:right_operand}${3:, ${4:scale}})
endsnippet

snippet bcpow "Raise an arbitrary precision number to another" i
bcpow(${1:x}, ${2:y}${3:, ${4:scale}})
endsnippet

snippet bcpowmod "Raise an arbitrary precision number to another, reduced by a specified modulus" i
bcpowmod(${1:x}, ${2:y}, ${3:mod}${4:, ${5:scale}})
endsnippet

snippet bcscale "Set or get default scale parameter for all bc math functions" i
bcscale(${1:scale})
endsnippet

snippet bcsqrt "Get the square root of an arbitrary precision number" i
bcsqrt(${1:operand}${2:, ${3:scale}})
endsnippet

snippet bcsub "Subtract one arbitrary precision number from another" i
bcsub(${1:left_operand}, ${2:right_operand}${3:, ${4:scale}})
endsnippet

snippet bin2hex "Convert binary data into hexadecimal representation" i
bin2hex(${1:data})
endsnippet

snippet bind_textdomain_codeset "Specify the character encoding in which the messages from the DOMAIN message catalog will be returned" i
bind_textdomain_codeset(${1:domain}, ${2:codeset})
endsnippet

snippet bindec "Binary to decimal" i
bindec(${1:binary_number})
endsnippet

snippet bindtextdomain "Sets the path for a domain" i
bindtextdomain(${1:domain_name}, ${2:dir})
endsnippet

snippet boolval "Get the boolean value of a variable" i
boolval(${1:var})
endsnippet

snippet bzclose "Close a bzip2 file" i
bzclose(${1:fp})
endsnippet

snippet bzcompress "Compress a string into bzip2 encoded data" i
bzcompress(${1:source}${2:, ${3:blocksize}${4:, ${5:workfactor}}})
endsnippet

snippet bzdecompress "Decompresses bzip2 encoded data" i
bzdecompress(${1:source}${2:, ${3:small}})
endsnippet

snippet bzerrno "Returns a bzip2 error number" i
bzerrno(${1:bz})
endsnippet

snippet bzerror "Returns the bzip2 error number and error string in an array" i
bzerror(${1:bz})
endsnippet

snippet bzerrstr "Returns a bzip2 error string" i
bzerrstr(${1:bz})
endsnippet

snippet bzflush "Force a write of all buffered data" i
bzflush(${1:fp})
endsnippet

snippet bzopen "Opens a bzip2 compressed file" i
bzopen(${1:file}, ${2:mode})
endsnippet

snippet bzread "Binary safe bzip2 file read" i
bzread(${1:bz}${2:, ${3:length}})
endsnippet

snippet bzwrite "Binary safe bzip2 file write" i
bzwrite(${1:fp}, ${2:str}${3:, ${4:length}})
endsnippet

snippet cal_days_in_month "Return the number of days in a month for a given year and calendar" i
cal_days_in_month(${1:calendar}, ${2:month}, ${3:year})
endsnippet

snippet cal_from_jd "Converts from Julian Day Count to a supported calendar" i
cal_from_jd(${1:jd}, ${2:calendar})
endsnippet

snippet cal_info "Returns information about a particular calendar" i
cal_info(${1:calendar})
endsnippet

snippet cal_to_jd "Converts from a supported calendar to Julian Day Count" i
cal_to_jd(${1:calendar}, ${2:month}, ${3:day}, ${4:year})
endsnippet

snippet call_user_func "Call the callback given by the first parameter" i
call_user_func(${1:function_name}${2:, ${3:parameters}})
endsnippet

snippet call_user_func_array "Call a callback with an array of parameters" i
call_user_func_array(${1:function_name}, ${2:parameters})
endsnippet

snippet ceil "Round fractions up" i
ceil(${1:number})
endsnippet

snippet chdir "Change directory" i
chdir(${1:directory})
endsnippet

snippet checkdate "Validate a Gregorian date" i
checkdate(${1:month}, ${2:day}, ${3:year})
endsnippet

snippet checkdnsrr "Check DNS records corresponding to a given Internet host name or IP address" i
checkdnsrr(${1:host}${2:, ${3:type}})
endsnippet

snippet chgrp "Changes file group" i
chgrp(${1:filename}, ${2:group})
endsnippet

snippet chmod "Changes file mode" i
chmod(${1:filename}, ${2:mode})
endsnippet

snippet chop "Alias of rtrim()" i
chop(${1:str}${2:, ${3:character_mask}})
endsnippet

snippet chown "Changes file owner" i
chown(${1:filename}, ${2:user})
endsnippet

snippet chr "Generate a single-byte string from a number" i
chr(${1:codepoint})
endsnippet

snippet chunk_split "Split a string into smaller chunks" i
chunk_split(${1:str}${2:, ${3:chunklen}${4:, ${5:ending}}})
endsnippet

snippet class_alias "Creates an alias for a class" i
class_alias(${1:user_class_name}, ${2:alias_name}${3:, ${4:autoload}})
endsnippet

snippet class_exists "Checks if the class has been defined" i
class_exists(${1:classname}${2:, ${3:autoload}})
endsnippet

snippet class_implements "Return the interfaces which are implemented by the given class or interface" i
class_implements(${1:what}${2:, ${3:autoload}})
endsnippet

snippet class_parents "Return the parent classes of the given class" i
class_parents(${1:instance}${2:, ${3:autoload}})
endsnippet

snippet class_uses "Return the traits used by the given class" i
class_uses(${1:what}${2:, ${3:autoload}})
endsnippet

snippet clearstatcache "Clears file status cache" i
clearstatcache(${1:clear_realpath_cache}${2:, ${3:filename}})
endsnippet

snippet cli_get_process_title "Returns the current process title" i
cli_get_process_title()
endsnippet

snippet cli_set_process_title "Sets the process title" i
cli_set_process_title(${1:title})
endsnippet

snippet closedir "Close directory handle" i
closedir(${1:dir_handle})
endsnippet

snippet closelog "Close connection to system logger" i
closelog()
endsnippet

snippet collator_asort "Sort array maintaining index association" i
collator_asort(${1:object}, ${2:&(array) arr}${3:, ${4:sort_flags}})
endsnippet

snippet collator_compare "Compare two Unicode strings" i
collator_compare(${1:object}, ${2:arg1}, ${3:arg2})
endsnippet

snippet collator_create "Create a collator" i
collator_create(${1:arg1})
endsnippet

snippet collator_get_attribute "" i
collator_get_attribute(${1:object}, ${2:arg1})
endsnippet

snippet collator_get_error_code "" i
collator_get_error_code(${1:object})
endsnippet

snippet collator_get_error_message "" i
collator_get_error_message(${1:object})
endsnippet

snippet collator_get_locale "" i
collator_get_locale(${1:object}, ${2:arg1})
endsnippet

snippet collator_get_sort_key "" i
collator_get_sort_key(${1:object}, ${2:arg1})
endsnippet

snippet collator_get_strength "" i
collator_get_strength(${1:object})
endsnippet

snippet collator_set_attribute "" i
collator_set_attribute(${1:object}, ${2:arg1}, ${3:arg2})
endsnippet

snippet collator_set_strength "" i
collator_set_strength(${1:object}, ${2:arg1})
endsnippet

snippet collator_sort "Sort array using specified collator" i
collator_sort(${1:object}, ${2:&(array) arr}${3:, ${4:sort_flags}})
endsnippet

snippet collator_sort_with_sort_keys "" i
collator_sort_with_sort_keys(${1:coll}, ${2:&(array) arr})
endsnippet

snippet compact "Create array containing variables and their values" i
compact(${1:var_names})
endsnippet

snippet connection_aborted "Check whether client disconnected" i
connection_aborted()
endsnippet

snippet connection_status "Returns connection status bitfield" i
connection_status()
endsnippet

snippet constant "Returns the value of a constant" i
constant(${1:const_name})
endsnippet

snippet convert_cyr_string "Convert from one Cyrillic character set to another" i
convert_cyr_string(${1:str}, ${2:from}, ${3:to})
endsnippet

snippet convert_uudecode "Decode a uuencoded string" i
convert_uudecode(${1:data})
endsnippet

snippet convert_uuencode "Uuencode a string" i
convert_uuencode(${1:data})
endsnippet

snippet copy "Copies file" i
copy(${1:source_file}, ${2:destination_file}${3:, ${4:context}})
endsnippet

snippet cos "Cosine" i
cos(${1:number})
endsnippet

snippet cosh "Hyperbolic cosine" i
cosh(${1:number})
endsnippet

snippet count "Count all elements in an array, or something in an object" i
count(${1:var}${2:, ${3:mode}})
endsnippet

snippet count_chars "Return information about characters used in a string" i
count_chars(${1:input}${2:, ${3:mode}})
endsnippet

snippet crc32 "Calculates the crc32 polynomial of a string" i
crc32(${1:str})
endsnippet

snippet crypt "One-way string hashing" i
crypt(${1:str}${2:, ${3:salt}})
endsnippet

snippet ctype_alnum "Check for alphanumeric character(s)" i
ctype_alnum(${1:text})
endsnippet

snippet ctype_alpha "Check for alphabetic character(s)" i
ctype_alpha(${1:text})
endsnippet

snippet ctype_cntrl "Check for control character(s)" i
ctype_cntrl(${1:text})
endsnippet

snippet ctype_digit "Check for numeric character(s)" i
ctype_digit(${1:text})
endsnippet

snippet ctype_graph "Check for any printable character(s) except space" i
ctype_graph(${1:text})
endsnippet

snippet ctype_lower "Check for lowercase character(s)" i
ctype_lower(${1:text})
endsnippet

snippet ctype_print "Check for printable character(s)" i
ctype_print(${1:text})
endsnippet

snippet ctype_punct "Check for any printable character which is not whitespace or an alphanumeric character" i
ctype_punct(${1:text})
endsnippet

snippet ctype_space "Check for whitespace character(s)" i
ctype_space(${1:text})
endsnippet

snippet ctype_upper "Check for uppercase character(s)" i
ctype_upper(${1:text})
endsnippet

snippet ctype_xdigit "Check for character(s) representing a hexadecimal digit" i
ctype_xdigit(${1:text})
endsnippet

snippet curl_close "Close a cURL session" i
curl_close(${1:ch})
endsnippet

snippet curl_copy_handle "Copy a cURL handle along with all of its preferences" i
curl_copy_handle(${1:ch})
endsnippet

snippet curl_errno "Return the last error number" i
curl_errno(${1:ch})
endsnippet

snippet curl_error "Return a string containing the last error for the current session" i
curl_error(${1:ch})
endsnippet

snippet curl_escape "URL encodes the given string" i
curl_escape(${1:ch}, ${2:str})
endsnippet

snippet curl_exec "Perform a cURL session" i
curl_exec(${1:ch})
endsnippet

snippet curl_file_create "Create a CURLFile object" i
curl_file_create(${1:filename}${2:, ${3:mimetype}${4:, ${5:postname}}})
endsnippet

snippet curl_getinfo "Get information regarding a specific transfer" i
curl_getinfo(${1:ch}${2:, ${3:option}})
endsnippet

snippet curl_init "Initialize a cURL session" i
curl_init(${1:url})
endsnippet

snippet curl_multi_add_handle "Add a normal cURL handle to a cURL multi handle" i
curl_multi_add_handle(${1:mh}, ${2:ch})
endsnippet

snippet curl_multi_close "Close a set of cURL handles" i
curl_multi_close(${1:mh})
endsnippet

snippet curl_multi_errno "Return the last multi curl error number" i
curl_multi_errno(${1:mh})
endsnippet

snippet curl_multi_exec "Run the sub-connections of the current cURL handle" i
curl_multi_exec(${1:mh}${2:, ${3:&still_running}})
endsnippet

snippet curl_multi_getcontent "Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set" i
curl_multi_getcontent(${1:ch})
endsnippet

snippet curl_multi_info_read "Get information about the current transfers" i
curl_multi_info_read(${1:mh}${2:, ${3:&msgs_in_queue}})
endsnippet

snippet curl_multi_init "Returns a new cURL multi handle" i
curl_multi_init()
endsnippet

snippet curl_multi_remove_handle "Remove a multi handle from a set of cURL handles" i
curl_multi_remove_handle(${1:mh}, ${2:ch})
endsnippet

snippet curl_multi_select "Wait for activity on any curl_multi connection" i
curl_multi_select(${1:mh}${2:, ${3:timeout}})
endsnippet

snippet curl_multi_setopt "Set an option for the cURL multi handle" i
curl_multi_setopt(${1:sh}, ${2:option}, ${3:value})
endsnippet

snippet curl_multi_strerror "Return string describing error code" i
curl_multi_strerror(${1:errornum})
endsnippet

snippet curl_pause "Pause and unpause a connection" i
curl_pause(${1:ch}, ${2:bitmask})
endsnippet

snippet curl_reset "Reset all options of a libcurl session handle" i
curl_reset(${1:ch})
endsnippet

snippet curl_setopt "Set an option for a cURL transfer" i
curl_setopt(${1:ch}, ${2:option}, ${3:value})
endsnippet

snippet curl_setopt_array "Set multiple options for a cURL transfer" i
curl_setopt_array(${1:ch}, ${2:(array) options})
endsnippet

snippet curl_share_close "Close a cURL share handle" i
curl_share_close(${1:sh})
endsnippet

snippet curl_share_errno "Return the last share curl error number" i
curl_share_errno(${1:sh})
endsnippet

snippet curl_share_init "Initialize a cURL share handle" i
curl_share_init()
endsnippet

snippet curl_share_setopt "Set an option for a cURL share handle" i
curl_share_setopt(${1:sh}, ${2:option}, ${3:value})
endsnippet

snippet curl_share_strerror "Return string describing the given error code" i
curl_share_strerror(${1:errornum})
endsnippet

snippet curl_strerror "Return string describing the given error code" i
curl_strerror(${1:errornum})
endsnippet

snippet curl_unescape "Decodes the given URL encoded string" i
curl_unescape(${1:ch}, ${2:str})
endsnippet

snippet curl_version "Gets cURL version information" i
curl_version(${1:version})
endsnippet

snippet current "Return the current element in an array" i
current(${1:arg})
endsnippet

snippet date "Format a local time/date" i
date(${1:format}${2:, ${3:timestamp}})
endsnippet

snippet date_add "Alias of DateTime::add()" i
date_add(${1:object}, ${2:interval})
endsnippet

snippet date_create "Alias of DateTime::__construct()" i
date_create(${1:time}${2:, ${3:timezone}})
endsnippet

snippet date_create_from_format "Alias of DateTime::createFromFormat()" i
date_create_from_format(${1:format}, ${2:time}${3:, ${4:object}})
endsnippet

snippet date_create_immutable "Alias of DateTimeImmutable::__construct()" i
date_create_immutable(${1:time}${2:, ${3:timezone}})
endsnippet

snippet date_create_immutable_from_format "Alias of DateTimeImmutable::createFromFormat()" i
date_create_immutable_from_format(${1:format}, ${2:time}${3:, ${4:object}})
endsnippet

snippet date_date_set "Alias of DateTime::setDate()" i
date_date_set(${1:object}, ${2:year}, ${3:month}, ${4:day})
endsnippet

snippet date_default_timezone_get "Gets the default timezone used by all date/time functions in a script" i
date_default_timezone_get()
endsnippet

snippet date_default_timezone_set "Sets the default timezone used by all date/time functions in a script" i
date_default_timezone_set(${1:timezone_identifier})
endsnippet

snippet date_diff "Alias of DateTime::diff()" i
date_diff(${1:object}, ${2:object2}${3:, ${4:absolute}})
endsnippet

snippet date_format "Alias of DateTime::format()" i
date_format(${1:object}, ${2:format})
endsnippet

snippet date_get_last_errors "Alias of DateTime::getLastErrors()" i
date_get_last_errors()
endsnippet

snippet date_interval_create_from_date_string "Alias of DateInterval::createFromDateString()" i
date_interval_create_from_date_string(${1:time})
endsnippet

snippet date_interval_format "Alias of DateInterval::format()" i
date_interval_format(${1:object}, ${2:format})
endsnippet

snippet date_isodate_set "Alias of DateTime::setISODate()" i
date_isodate_set(${1:object}, ${2:year}, ${3:week}${4:, ${5:day}})
endsnippet

snippet date_modify "Alias of DateTime::modify()" i
date_modify(${1:object}, ${2:modify})
endsnippet

snippet date_offset_get "Alias of DateTime::getOffset()" i
date_offset_get(${1:object})
endsnippet

snippet date_parse "Returns associative array with detailed info about given date" i
date_parse(${1:date})
endsnippet

snippet date_parse_from_format "Get info about given date formatted according to the specified format" i
date_parse_from_format(${1:format}, ${2:date})
endsnippet

snippet date_sub "Alias of DateTime::sub()" i
date_sub(${1:object}, ${2:interval})
endsnippet

snippet date_sun_info "Returns an array with information about sunset/sunrise and twilight begin/end" i
date_sun_info(${1:time}, ${2:latitude}, ${3:longitude})
endsnippet

snippet date_sunrise "Returns time of sunrise for a given day and location" i
date_sunrise(${1:time}${2:, ${3:format}${4:, ${5:latitude}${6:, ${7:longitude}${8:, ${9:zenith}${10:, ${11:gmt_offset}}}}}})
endsnippet

snippet date_sunset "Returns time of sunset for a given day and location" i
date_sunset(${1:time}${2:, ${3:format}${4:, ${5:latitude}${6:, ${7:longitude}${8:, ${9:zenith}${10:, ${11:gmt_offset}}}}}})
endsnippet

snippet date_time_set "Alias of DateTime::setTime()" i
date_time_set(${1:object}, ${2:hour}, ${3:minute}${4:, ${5:second}${6:, ${7:microseconds}}})
endsnippet

snippet date_timestamp_get "Alias of DateTime::getTimestamp()" i
date_timestamp_get(${1:object})
endsnippet

snippet date_timestamp_set "Alias of DateTime::setTimestamp()" i
date_timestamp_set(${1:object}, ${2:unixtimestamp})
endsnippet

snippet date_timezone_get "Alias of DateTime::getTimezone()" i
date_timezone_get(${1:object})
endsnippet

snippet date_timezone_set "Alias of DateTime::setTimezone()" i
date_timezone_set(${1:object}, ${2:timezone})
endsnippet

snippet datefmt_create "" i
datefmt_create(${1:locale}, ${2:date_type}, ${3:time_type}${4:, ${5:timezone_str}${6:, ${7:calendar}${8:, ${9:pattern}}}})
endsnippet

snippet datefmt_format "" i
datefmt_format(${1:args}${2:, ${3:array}})
endsnippet

snippet datefmt_format_object "" i
datefmt_format_object(${1:object}${2:, ${3:format}${4:, ${5:locale}}})
endsnippet

snippet datefmt_get_calendar "" i
datefmt_get_calendar(${1:mf})
endsnippet

snippet datefmt_get_calendar_object "" i
datefmt_get_calendar_object(${1:mf})
endsnippet

snippet datefmt_get_datetype "" i
datefmt_get_datetype(${1:mf})
endsnippet

snippet datefmt_get_error_code "" i
datefmt_get_error_code(${1:nf})
endsnippet

snippet datefmt_get_error_message "" i
datefmt_get_error_message(${1:coll})
endsnippet

snippet datefmt_get_locale "" i
datefmt_get_locale(${1:mf})
endsnippet

snippet datefmt_get_pattern "" i
datefmt_get_pattern(${1:mf})
endsnippet

snippet datefmt_get_timetype "" i
datefmt_get_timetype(${1:mf})
endsnippet

snippet datefmt_get_timezone "" i
datefmt_get_timezone(${1:mf})
endsnippet

snippet datefmt_get_timezone_id "" i
datefmt_get_timezone_id(${1:mf})
endsnippet

snippet datefmt_is_lenient "" i
datefmt_is_lenient(${1:mf})
endsnippet

snippet datefmt_localtime "" i
datefmt_localtime(${1:formatter}, ${2:string}${3:, ${4:&position}})
endsnippet

snippet datefmt_parse "" i
datefmt_parse(${1:formatter}, ${2:string}${3:, ${4:&position}})
endsnippet

snippet datefmt_set_calendar "" i
datefmt_set_calendar(${1:mf}, ${2:calendar})
endsnippet

snippet datefmt_set_lenient "" i
datefmt_set_lenient(${1:mf})
endsnippet

snippet datefmt_set_pattern "" i
datefmt_set_pattern(${1:mf}, ${2:pattern})
endsnippet

snippet datefmt_set_timezone "" i
datefmt_set_timezone(${1:mf}, ${2:timezone})
endsnippet

snippet dcgettext "Overrides the domain for a single lookup" i
dcgettext(${1:domain_name}, ${2:msgid}, ${3:category})
endsnippet

snippet dcngettext "Plural version of dcgettext" i
dcngettext(${1:domain}, ${2:msgid1}, ${3:msgid2}, ${4:count}, ${5:category})
endsnippet

snippet debug_backtrace "Generates a backtrace" i
debug_backtrace(${1:options}${2:, ${3:limit}})
endsnippet

snippet debug_print_backtrace "Prints a backtrace" i
debug_print_backtrace(${1:options}${2:, ${3:limit}})
endsnippet

snippet debug_zval_dump "Dumps a string representation of an internal zend value to output" i
debug_zval_dump(${1:vars})
endsnippet

snippet decbin "Decimal to binary" i
decbin(${1:decimal_number})
endsnippet

snippet dechex "Decimal to hexadecimal" i
dechex(${1:decimal_number})
endsnippet

snippet decoct "Decimal to octal" i
decoct(${1:decimal_number})
endsnippet

snippet define "Defines a named constant" i
define(${1:constant_name}, ${2:value}${3:, ${4:case_insensitive}})
endsnippet

snippet defined "Checks whether a given named constant exists" i
defined(${1:constant_name})
endsnippet

snippet deflate_add "Incrementally deflate data" i
deflate_add(${1:resource}, ${2:add}${3:, ${4:flush_behavior}})
endsnippet

snippet deflate_init "Initialize an incremental deflate context" i
deflate_init(${1:encoding}${2:, ${3:level}})
endsnippet

snippet deg2rad "Converts the number in degrees to the radian equivalent" i
deg2rad(${1:number})
endsnippet

snippet dgettext "Override the current domain" i
dgettext(${1:domain_name}, ${2:msgid})
endsnippet

snippet dir "Return an instance of the Directory class" i
dir(${1:directory}${2:, ${3:context}})
endsnippet

snippet dirname "Returns a parent directory's path" i
dirname(${1:path}${2:, ${3:levels}})
endsnippet

snippet disk_free_space "Returns available space on filesystem or disk partition" i
disk_free_space(${1:path})
endsnippet

snippet disk_total_space "Returns the total size of a filesystem or disk partition" i
disk_total_space(${1:path})
endsnippet

snippet diskfreespace "Alias of disk_free_space()" i
diskfreespace(${1:path})
endsnippet

snippet dl "Loads a PHP extension at runtime" i
dl(${1:extension_filename})
endsnippet

snippet dngettext "Plural version of dgettext" i
dngettext(${1:domain}, ${2:msgid1}, ${3:msgid2}, ${4:count})
endsnippet

snippet dns_check_record "Alias of checkdnsrr()" i
dns_check_record(${1:host}${2:, ${3:type}})
endsnippet

snippet dns_get_mx "Alias of getmxrr()" i
dns_get_mx(${1:hostname}, ${2:&mxhosts}${3:, ${4:&weight}})
endsnippet

snippet dns_get_record "Fetch DNS Resource Records associated with a hostname" i
dns_get_record(${1:hostname}${2:, ${3:type}${4:, ${5:&(array) authns}${6:, ${7:&(array) addtl}${8:, ${9:raw}}}}})
endsnippet

snippet dom_import_simplexml "Gets a DOMElement object from a SimpleXMLElement object" i
dom_import_simplexml(${1:node})
endsnippet

snippet doubleval "Alias of floatval()" i
doubleval(${1:var})
endsnippet

snippet each "Return the current key and value pair from an array and advance the array cursor" i
each(${1:&arr})
endsnippet

snippet easter_date "Get Unix timestamp for midnight on Easter of a given year" i
easter_date(${1:year})
endsnippet

snippet easter_days "Get number of days after March 21 on which Easter falls for a given year" i
easter_days(${1:year}${2:, ${3:method}})
endsnippet

snippet end "Set the internal pointer of an array to its last element" i
end(${1:&arg})
endsnippet

snippet error_clear_last "Clear the most recent error" i
error_clear_last()
endsnippet

snippet error_get_last "Get the last occurred error" i
error_get_last()
endsnippet

snippet error_log "Send an error message to the defined error handling routines" i
error_log(${1:message}${2:, ${3:message_type}${4:, ${5:destination}${6:, ${7:extra_headers}}}})
endsnippet

snippet error_reporting "Sets which PHP errors are reported" i
error_reporting(${1:new_error_level})
endsnippet

snippet escapeshellarg "Escape a string to be used as a shell argument" i
escapeshellarg(${1:arg})
endsnippet

snippet escapeshellcmd "Escape shell metacharacters" i
escapeshellcmd(${1:command})
endsnippet

snippet exec "Execute an external program" i
exec(${1:command}${2:, ${3:&output}${4:, ${5:&return_value}}})
endsnippet

snippet exif_imagetype "Determine the type of an image" i
exif_imagetype(${1:imagefile})
endsnippet

snippet exif_read_data "Reads the EXIF headers from an image file" i
exif_read_data(${1:filename}${2:, ${3:sections_needed}${4:, ${5:sub_arrays}${6:, ${7:read_thumbnail}}}})
endsnippet

snippet exif_tagname "Get the header name for an index" i
exif_tagname(${1:index})
endsnippet

snippet exif_thumbnail "Retrieve the embedded thumbnail of an image" i
exif_thumbnail(${1:filename}${2:, ${3:&width}${4:, ${5:&height}${6:, ${7:&imagetype}}}})
endsnippet

snippet exp "Calculates the exponent of e" i
exp(${1:number})
endsnippet

snippet explode "Split a string by a string" i
explode(${1:separator}, ${2:str}${3:, ${4:limit}})
endsnippet

snippet expm1 "Returns exp(number) - 1, computed in a way that is accurate even when the value of number is close to zero" i
expm1(${1:number})
endsnippet

snippet extension_loaded "Find out whether an extension is loaded" i
extension_loaded(${1:extension_name})
endsnippet

snippet extract "Import variables into the current symbol table from an array" i
extract(${1:&arg}${2:, ${3:extract_type}${4:, ${5:prefix}}})
endsnippet

snippet ezmlm_hash "Calculate the hash value needed by EZMLM" i
ezmlm_hash(${1:addr})
endsnippet

snippet fclose "Closes an open file pointer" i
fclose(${1:fp})
endsnippet

snippet feof "Tests for end-of-file on a file pointer" i
feof(${1:fp})
endsnippet

snippet fflush "Flushes the output to a file" i
fflush(${1:fp})
endsnippet

snippet fgetc "Gets character from file pointer" i
fgetc(${1:fp})
endsnippet

snippet fgetcsv "Gets line from file pointer and parse for CSV fields" i
fgetcsv(${1:fp}${2:, ${3:length}${4:, ${5:delimiter}${6:, ${7:enclosure}${8:, ${9:escape}}}}})
endsnippet

snippet fgets "Gets line from file pointer" i
fgets(${1:fp}${2:, ${3:length}})
endsnippet

snippet file "Reads entire file into an array" i
file(${1:filename}${2:, ${3:flags}${4:, ${5:context}}})
endsnippet

snippet file_exists "Checks whether a file or directory exists" i
file_exists(${1:filename})
endsnippet

snippet file_get_contents "Reads entire file into a string" i
file_get_contents(${1:filename}${2:, ${3:flags}${4:, ${5:context}${6:, ${7:offset}${8:, ${9:maxlen}}}}})
endsnippet

snippet file_put_contents "Write data to a file" i
file_put_contents(${1:filename}, ${2:data}${3:, ${4:flags}${5:, ${6:context}}})
endsnippet

snippet fileatime "Gets last access time of file" i
fileatime(${1:filename})
endsnippet

snippet filectime "Gets inode change time of file" i
filectime(${1:filename})
endsnippet

snippet filegroup "Gets file group" i
filegroup(${1:filename})
endsnippet

snippet fileinode "Gets file inode" i
fileinode(${1:filename})
endsnippet

snippet filemtime "Gets file modification time" i
filemtime(${1:filename})
endsnippet

snippet fileowner "Gets file owner" i
fileowner(${1:filename})
endsnippet

snippet fileperms "Gets file permissions" i
fileperms(${1:filename})
endsnippet

snippet filesize "Gets file size" i
filesize(${1:filename})
endsnippet

snippet filetype "Gets file type" i
filetype(${1:filename})
endsnippet

snippet filter_has_var "Checks if variable of specified type exists" i
filter_has_var(${1:type}, ${2:variable_name})
endsnippet

snippet filter_id "Returns the filter ID belonging to a named filter" i
filter_id(${1:filtername})
endsnippet

snippet filter_input "Gets a specific external variable by name and optionally filters it" i
filter_input(${1:type}, ${2:variable_name}${3:, ${4:filter}${5:, ${6:options}}})
endsnippet

snippet filter_input_array "Gets external variables and optionally filters them" i
filter_input_array(${1:type}${2:, ${3:definition}${4:, ${5:add_empty}}})
endsnippet

snippet filter_list "Returns a list of all supported filters" i
filter_list()
endsnippet

snippet filter_var "Filters a variable with a specified filter" i
filter_var(${1:variable}${2:, ${3:filter}${4:, ${5:options}}})
endsnippet

snippet filter_var_array "Gets multiple variables and optionally filters them" i
filter_var_array(${1:data}${2:, ${3:definition}${4:, ${5:add_empty}}})
endsnippet

snippet finfo_buffer "Return information about a string buffer" i
finfo_buffer(${1:finfo}, ${2:string}${3:, ${4:options}${5:, ${6:context}}})
endsnippet

snippet finfo_close "Close fileinfo resource" i
finfo_close(${1:finfo})
endsnippet

snippet finfo_file "Return information about a file" i
finfo_file(${1:finfo}, ${2:filename}${3:, ${4:options}${5:, ${6:context}}})
endsnippet

snippet finfo_open "Create a new fileinfo resource" i
finfo_open(${1:options}${2:, ${3:arg}})
endsnippet

snippet finfo_set_flags "Set libmagic configuration options" i
finfo_set_flags(${1:finfo}, ${2:options})
endsnippet

snippet floatval "Get float value of a variable" i
floatval(${1:var})
endsnippet

snippet flock "Portable advisory file locking" i
flock(${1:fp}, ${2:operation}${3:, ${4:&wouldblock}})
endsnippet

snippet floor "Round fractions down" i
floor(${1:number})
endsnippet

snippet flush "Flush system output buffer" i
flush()
endsnippet

snippet fmod "Returns the floating point remainder (modulo) of the division of the arguments" i
fmod(${1:x}, ${2:y})
endsnippet

snippet fnmatch "Match filename against a pattern" i
fnmatch(${1:pattern}, ${2:filename}${3:, ${4:flags}})
endsnippet

snippet fopen "Opens file or URL" i
fopen(${1:filename}, ${2:mode}${3:, ${4:use_include_path}${5:, ${6:context}}})
endsnippet

snippet forward_static_call "Call a static method" i
forward_static_call(${1:function_name}${2:, ${3:parameters}})
endsnippet

snippet forward_static_call_array "Call a static method and pass the arguments as array" i
forward_static_call_array(${1:function_name}, ${2:parameters})
endsnippet

snippet fpassthru "Output all remaining data on a file pointer" i
fpassthru(${1:fp})
endsnippet

snippet fprintf "Write a formatted string to a stream" i
fprintf(${1:stream}, ${2:format}${3:, ${4:args}})
endsnippet

snippet fputcsv "Format line as CSV and write to file pointer" i
fputcsv(${1:fp}, ${2:fields}${3:, ${4:delimiter}${5:, ${6:enclosure}${7:, ${8:escape_char}}}})
endsnippet

snippet fputs "Alias of fwrite()" i
fputs(${1:fp}, ${2:str}${3:, ${4:length}})
endsnippet

snippet fread "Binary-safe file read" i
fread(${1:fp}, ${2:length})
endsnippet

snippet frenchtojd "Converts a date from the French Republican Calendar to a Julian Day Count" i
frenchtojd(${1:month}, ${2:day}, ${3:year})
endsnippet

snippet fscanf "Parses input from a file according to a format" i
fscanf(${1:stream}, ${2:format}${3:, ${4:&vars}})
endsnippet

snippet fseek "Seeks on a file pointer" i
fseek(${1:fp}, ${2:offset}${3:, ${4:whence}})
endsnippet

snippet fsockopen "Open Internet or Unix domain socket connection" i
fsockopen(${1:hostname}${2:, ${3:port}${4:, ${5:&errno}${6:, ${7:&errstr}${8:, ${9:timeout}}}}})
endsnippet

snippet fstat "Gets information about a file using an open file pointer" i
fstat(${1:fp})
endsnippet

snippet ftell "Returns the current position of the file read/write pointer" i
ftell(${1:fp})
endsnippet

snippet ftok "Convert a pathname and a project identifier to a System V IPC key" i
ftok(${1:pathname}, ${2:proj})
endsnippet

snippet ftp_alloc "Allocates space for a file to be uploaded" i
ftp_alloc(${1:ftp}, ${2:size}${3:, ${4:&response}})
endsnippet

snippet ftp_append "Append the contents of a file to another file on the FTP server" i
ftp_append(${1:ftp}, ${2:remote_file}, ${3:local_file}${4:, ${5:mode}})
endsnippet

snippet ftp_cdup "Changes to the parent directory" i
ftp_cdup(${1:ftp})
endsnippet

snippet ftp_chdir "Changes the current directory on a FTP server" i
ftp_chdir(${1:ftp}, ${2:directory})
endsnippet

snippet ftp_chmod "Set permissions on a file via FTP" i
ftp_chmod(${1:ftp}, ${2:mode}, ${3:filename})
endsnippet

snippet ftp_close "Closes an FTP connection" i
ftp_close(${1:ftp})
endsnippet

snippet ftp_connect "Opens an FTP connection" i
ftp_connect(${1:host}${2:, ${3:port}${4:, ${5:timeout}}})
endsnippet

snippet ftp_delete "Deletes a file on the FTP server" i
ftp_delete(${1:ftp}, ${2:file})
endsnippet

snippet ftp_exec "Requests execution of a command on the FTP server" i
ftp_exec(${1:ftp}, ${2:command})
endsnippet

snippet ftp_fget "Downloads a file from the FTP server and saves to an open file" i
ftp_fget(${1:ftp}, ${2:fp}, ${3:remote_file}${4:, ${5:mode}${6:, ${7:resumepos}}})
endsnippet

snippet ftp_fput "Uploads from an open file to the FTP server" i
ftp_fput(${1:ftp}, ${2:remote_file}, ${3:fp}${4:, ${5:mode}${6:, ${7:startpos}}})
endsnippet

snippet ftp_get "Downloads a file from the FTP server" i
ftp_get(${1:ftp}, ${2:local_file}, ${3:remote_file}${4:, ${5:mode}${6:, ${7:resume_pos}}})
endsnippet

snippet ftp_get_option "Retrieves various runtime behaviours of the current FTP stream" i
ftp_get_option(${1:ftp}, ${2:option})
endsnippet

snippet ftp_login "Logs in to an FTP connection" i
ftp_login(${1:ftp}, ${2:username}, ${3:password})
endsnippet

snippet ftp_mdtm "Returns the last modified time of the given file" i
ftp_mdtm(${1:ftp}, ${2:filename})
endsnippet

snippet ftp_mkdir "Creates a directory" i
ftp_mkdir(${1:ftp}, ${2:directory})
endsnippet

snippet ftp_mlsd "Returns a list of files in the given directory" i
ftp_mlsd(${1:ftp}, ${2:directory})
endsnippet

snippet ftp_nb_continue "Continues retrieving/sending a file (non-blocking)" i
ftp_nb_continue(${1:ftp})
endsnippet

snippet ftp_nb_fget "Retrieves a file from the FTP server and writes it to an open file (non-blocking)" i
ftp_nb_fget(${1:ftp}, ${2:fp}, ${3:remote_file}${4:, ${5:mode}${6:, ${7:resumepos}}})
endsnippet

snippet ftp_nb_fput "Stores a file from an open file to the FTP server (non-blocking)" i
ftp_nb_fput(${1:ftp}, ${2:remote_file}, ${3:fp}${4:, ${5:mode}${6:, ${7:startpos}}})
endsnippet

snippet ftp_nb_get "Retrieves a file from the FTP server and writes it to a local file (non-blocking)" i
ftp_nb_get(${1:ftp}, ${2:local_file}, ${3:remote_file}${4:, ${5:mode}${6:, ${7:resume_pos}}})
endsnippet

snippet ftp_nb_put "Stores a file on the FTP server (non-blocking)" i
ftp_nb_put(${1:ftp}, ${2:remote_file}, ${3:local_file}${4:, ${5:mode}${6:, ${7:startpos}}})
endsnippet

snippet ftp_nlist "Returns a list of files in the given directory" i
ftp_nlist(${1:ftp}, ${2:directory})
endsnippet

snippet ftp_pasv "Turns passive mode on or off" i
ftp_pasv(${1:ftp}, ${2:pasv})
endsnippet

snippet ftp_put "Uploads a file to the FTP server" i
ftp_put(${1:ftp}, ${2:remote_file}, ${3:local_file}${4:, ${5:mode}${6:, ${7:startpos}}})
endsnippet

snippet ftp_pwd "Returns the current directory name" i
ftp_pwd(${1:ftp})
endsnippet

snippet ftp_quit "Alias of ftp_close()" i
ftp_quit(${1:ftp})
endsnippet

snippet ftp_raw "Sends an arbitrary command to an FTP server" i
ftp_raw(${1:ftp}, ${2:command})
endsnippet

snippet ftp_rawlist "Returns a detailed list of files in the given directory" i
ftp_rawlist(${1:ftp}, ${2:directory}${3:, ${4:recursive}})
endsnippet

snippet ftp_rename "Renames a file or a directory on the FTP server" i
ftp_rename(${1:ftp}, ${2:src}, ${3:dest})
endsnippet

snippet ftp_rmdir "Removes a directory" i
ftp_rmdir(${1:ftp}, ${2:directory})
endsnippet

snippet ftp_set_option "Set miscellaneous runtime FTP options" i
ftp_set_option(${1:ftp}, ${2:option}, ${3:value})
endsnippet

snippet ftp_site "Sends a SITE command to the server" i
ftp_site(${1:ftp}, ${2:cmd})
endsnippet

snippet ftp_size "Returns the size of the given file" i
ftp_size(${1:ftp}, ${2:filename})
endsnippet

snippet ftp_ssl_connect "Opens a Secure SSL-FTP connection" i
ftp_ssl_connect(${1:host}${2:, ${3:port}${4:, ${5:timeout}}})
endsnippet

snippet ftp_systype "Returns the system type identifier of the remote FTP server" i
ftp_systype(${1:ftp})
endsnippet

snippet ftruncate "Truncates a file to a given length" i
ftruncate(${1:fp}, ${2:size})
endsnippet

snippet func_get_arg "Return an item from the argument list" i
func_get_arg(${1:arg_num})
endsnippet

snippet func_get_args "Returns an array comprising a function's argument list" i
func_get_args()
endsnippet

snippet func_num_args "Returns the number of arguments passed to the function" i
func_num_args()
endsnippet

snippet function_exists "Return TRUE if the given function has been defined" i
function_exists(${1:function_name})
endsnippet

snippet fwrite "Binary-safe file write" i
fwrite(${1:fp}, ${2:str}${3:, ${4:length}})
endsnippet

snippet gc_collect_cycles "Forces collection of any existing garbage cycles" i
gc_collect_cycles()
endsnippet

snippet gc_disable "Deactivates the circular reference collector" i
gc_disable()
endsnippet

snippet gc_enable "Activates the circular reference collector" i
gc_enable()
endsnippet

snippet gc_enabled "Returns status of the circular reference collector" i
gc_enabled()
endsnippet

snippet gc_mem_caches "Reclaims memory used by the Zend Engine memory manager" i
gc_mem_caches()
endsnippet

snippet gc_status "Gets information about the garbage collector" i
gc_status()
endsnippet

snippet gd_info "Retrieve information about the currently installed GD library" i
gd_info()
endsnippet

snippet get_browser "Tells what the user's browser is capable of" i
get_browser(${1:browser_name}${2:, ${3:return_array}})
endsnippet

snippet get_called_class "The Late Static Binding class name" i
get_called_class()
endsnippet

snippet get_cfg_var "Gets the value of a PHP configuration option" i
get_cfg_var(${1:option_name})
endsnippet

snippet get_class "Returns the name of the class of an object" i
get_class(${1:object})
endsnippet

snippet get_class_methods "Gets the class methods' names" i
get_class_methods(${1:class})
endsnippet

snippet get_class_vars "Get the default properties of the class" i
get_class_vars(${1:class_name})
endsnippet

snippet get_current_user "Gets the name of the owner of the current PHP script" i
get_current_user()
endsnippet

snippet get_declared_classes "Returns an array with the name of the defined classes" i
get_declared_classes()
endsnippet

snippet get_declared_interfaces "Returns an array of all declared interfaces" i
get_declared_interfaces()
endsnippet

snippet get_declared_traits "Returns an array of all declared traits" i
get_declared_traits()
endsnippet

snippet get_defined_constants "Returns an associative array with the names of all the constants and their values" i
get_defined_constants(${1:categorize})
endsnippet

snippet get_defined_functions "Returns an array of all defined functions" i
get_defined_functions(${1:exclude_disabled})
endsnippet

snippet get_defined_vars "Returns an array of all defined variables" i
get_defined_vars()
endsnippet

snippet get_extension_funcs "Returns an array with the names of the functions of a module" i
get_extension_funcs(${1:extension_name})
endsnippet

snippet get_headers "Fetches all the headers sent by the server in response to an HTTP request" i
get_headers(${1:url}${2:, ${3:format}${4:, ${5:context}}})
endsnippet

snippet get_html_translation_table "Returns the translation table used by htmlspecialchars() and htmlentities()" i
get_html_translation_table(${1:table}${2:, ${3:quote_style}${4:, ${5:encoding}}})
endsnippet

snippet get_include_path "Gets the current include_path configuration option" i
get_include_path()
endsnippet

snippet get_included_files "Returns an array with the names of included or required files" i
get_included_files()
endsnippet

snippet get_loaded_extensions "Returns an array with the names of all modules compiled and loaded" i
get_loaded_extensions(${1:zend_extensions})
endsnippet

snippet get_magic_quotes_gpc "Gets the current configuration setting of magic_quotes_gpc" i
get_magic_quotes_gpc()
endsnippet

snippet get_magic_quotes_runtime "Gets the current active configuration setting of magic_quotes_runtime" i
get_magic_quotes_runtime()
endsnippet

snippet get_meta_tags "Extracts all meta tag content attributes from a file and returns an array" i
get_meta_tags(${1:filename}${2:, ${3:use_include_path}})
endsnippet

snippet get_object_vars "Gets the properties of the given object" i
get_object_vars(${1:obj})
endsnippet

snippet get_parent_class "Retrieves the parent class name for object or class" i
get_parent_class(${1:object})
endsnippet

snippet get_required_files "Alias of get_included_files()" i
get_required_files()
endsnippet

snippet get_resource_type "Returns the resource type" i
get_resource_type(${1:res})
endsnippet

snippet get_resources "Returns active resources" i
get_resources(${1:type})
endsnippet

snippet getcwd "Gets the current working directory" i
getcwd()
endsnippet

snippet getdate "Get date/time information" i
getdate(${1:timestamp})
endsnippet

snippet getenv "Gets the value of an environment variable" i
getenv(${1:varname}${2:, ${3:local_only}})
endsnippet

snippet gethostbyaddr "Get the Internet host name corresponding to a given IP address" i
gethostbyaddr(${1:ip_address})
endsnippet

snippet gethostbyname "Get the IPv4 address corresponding to a given Internet host name" i
gethostbyname(${1:hostname})
endsnippet

snippet gethostbynamel "Get a list of IPv4 addresses corresponding to a given Internet host name" i
gethostbynamel(${1:hostname})
endsnippet

snippet gethostname "Gets the host name" i
gethostname()
endsnippet

snippet getimagesize "Get the size of an image" i
getimagesize(${1:imagefile}${2:, ${3:&info}})
endsnippet

snippet getimagesizefromstring "Get the size of an image from a string" i
getimagesizefromstring(${1:imagefile}${2:, ${3:&info}})
endsnippet

snippet getlastmod "Gets time of last page modification" i
getlastmod()
endsnippet

snippet getmxrr "Get MX records corresponding to a given Internet host name" i
getmxrr(${1:hostname}, ${2:&mxhosts}${3:, ${4:&weight}})
endsnippet

snippet getmygid "Get PHP script owner's GID" i
getmygid()
endsnippet

snippet getmyinode "Gets the inode of the current script" i
getmyinode()
endsnippet

snippet getmypid "Gets PHP's process ID" i
getmypid()
endsnippet

snippet getmyuid "Gets PHP script owner's UID" i
getmyuid()
endsnippet

snippet getopt "Gets options from the command line argument list" i
getopt(${1:options}${2:, ${3:opts}${4:, ${5:&optind}}})
endsnippet

snippet getprotobyname "Get protocol number associated with protocol name" i
getprotobyname(${1:name})
endsnippet

snippet getprotobynumber "Get protocol name associated with protocol number" i
getprotobynumber(${1:proto})
endsnippet

snippet getrandmax "Show largest possible random value" i
getrandmax()
endsnippet

snippet getrusage "Gets the current resource usages" i
getrusage(${1:who})
endsnippet

snippet getservbyname "Get port number associated with an Internet service and protocol" i
getservbyname(${1:service}, ${2:protocol})
endsnippet

snippet getservbyport "Get Internet service which corresponds to port and protocol" i
getservbyport(${1:port}, ${2:protocol})
endsnippet

snippet gettext "Lookup a message in the current domain" i
gettext(${1:msgid})
endsnippet

snippet gettimeofday "Get current time" i
gettimeofday(${1:get_as_float})
endsnippet

snippet gettype "Get the type of a variable" i
gettype(${1:var})
endsnippet

snippet glob "Find pathnames matching a pattern" i
glob(${1:pattern}${2:, ${3:flags}})
endsnippet

snippet gmdate "Format a GMT/UTC date/time" i
gmdate(${1:format}${2:, ${3:timestamp}})
endsnippet

snippet gmmktime "Get Unix timestamp for a GMT date" i
gmmktime(${1:hour}${2:, ${3:min}${4:, ${5:sec}${6:, ${7:mon}${8:, ${9:day}${10:, ${11:year}}}}}})
endsnippet

snippet gmstrftime "Format a GMT/UTC time/date according to locale settings" i
gmstrftime(${1:format}${2:, ${3:timestamp}})
endsnippet

snippet grapheme_extract "Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8" i
grapheme_extract(${1:arg1}, ${2:arg2}${3:, ${4:arg3}${5:, ${6:arg4}${7:, ${8:&arg5}}}})
endsnippet

snippet grapheme_stripos "Find position (in grapheme units) of first occurrence of a case-insensitive string" i
grapheme_stripos(${1:haystack}, ${2:needle}${3:, ${4:offset}})
endsnippet

snippet grapheme_stristr "Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack" i
grapheme_stristr(${1:haystack}, ${2:needle}${3:, ${4:before_needle}})
endsnippet

snippet grapheme_strlen "Get string length in grapheme units" i
grapheme_strlen(${1:string})
endsnippet

snippet grapheme_strpos "Find position (in grapheme units) of first occurrence of a string" i
grapheme_strpos(${1:haystack}, ${2:needle}${3:, ${4:offset}})
endsnippet

snippet grapheme_strripos "Find position (in grapheme units) of last occurrence of a case-insensitive string" i
grapheme_strripos(${1:haystack}, ${2:needle}${3:, ${4:offset}})
endsnippet

snippet grapheme_strrpos "Find position (in grapheme units) of last occurrence of a string" i
grapheme_strrpos(${1:haystack}, ${2:needle}${3:, ${4:offset}})
endsnippet

snippet grapheme_strstr "Returns part of haystack string from the first occurrence of needle to the end of haystack" i
grapheme_strstr(${1:haystack}, ${2:needle}${3:, ${4:before_needle}})
endsnippet

snippet grapheme_substr "Return part of a string" i
grapheme_substr(${1:string}, ${2:start}${3:, ${4:length}})
endsnippet

snippet gregoriantojd "Converts a Gregorian date to Julian Day Count" i
gregoriantojd(${1:month}, ${2:day}, ${3:year})
endsnippet

snippet gzclose "Close an open gz-file pointer" i
gzclose(${1:fp})
endsnippet

snippet gzcompress "Compress a string" i
gzcompress(${1:data}${2:, ${3:level}${4:, ${5:encoding}}})
endsnippet

snippet gzdecode "Decodes a gzip compressed string" i
gzdecode(${1:data}${2:, ${3:max_decoded_len}})
endsnippet

snippet gzdeflate "Deflate a string" i
gzdeflate(${1:data}${2:, ${3:level}${4:, ${5:encoding}}})
endsnippet

snippet gzencode "Create a gzip compressed string" i
gzencode(${1:data}${2:, ${3:level}${4:, ${5:encoding}}})
endsnippet

snippet gzeof "Test for EOF on a gz-file pointer" i
gzeof(${1:fp})
endsnippet

snippet gzfile "Read entire gz-file into an array" i
gzfile(${1:filename}${2:, ${3:use_include_path}})
endsnippet

snippet gzgetc "Get character from gz-file pointer" i
gzgetc(${1:fp})
endsnippet

snippet gzgets "Get line from file pointer" i
gzgets(${1:fp}${2:, ${3:length}})
endsnippet

snippet gzinflate "Inflate a deflated string" i
gzinflate(${1:data}${2:, ${3:max_decoded_len}})
endsnippet

snippet gzopen "Open gz-file" i
gzopen(${1:filename}, ${2:mode}${3:, ${4:use_include_path}})
endsnippet

snippet gzpassthru "Output all remaining data on a gz-file pointer" i
gzpassthru(${1:fp})
endsnippet

snippet gzputs "Alias of gzwrite()" i
gzputs(${1:fp}, ${2:str}${3:, ${4:length}})
endsnippet

snippet gzread "Binary-safe gz-file read" i
gzread(${1:fp}, ${2:length})
endsnippet

snippet gzrewind "Rewind the position of a gz-file pointer" i
gzrewind(${1:fp})
endsnippet

snippet gzseek "Seek on a gz-file pointer" i
gzseek(${1:fp}, ${2:offset}${3:, ${4:whence}})
endsnippet

snippet gztell "Tell gz-file pointer read/write position" i
gztell(${1:fp})
endsnippet

snippet gzuncompress "Uncompress a compressed string" i
gzuncompress(${1:data}${2:, ${3:max_decoded_len}})
endsnippet

snippet gzwrite "Binary-safe gz-file write" i
gzwrite(${1:fp}, ${2:str}${3:, ${4:length}})
endsnippet

snippet hash "Generate a hash value (message digest)" i
hash(${1:algo}, ${2:data}${3:, ${4:raw_output}})
endsnippet

snippet hash_algos "Return a list of registered hashing algorithms" i
hash_algos()
endsnippet

snippet hash_copy "Copy hashing context" i
hash_copy(${1:context})
endsnippet

snippet hash_equals "Timing attack safe string comparison" i
hash_equals(${1:known_string}, ${2:user_string})
endsnippet

snippet hash_file "Generate a hash value using the contents of a given file" i
hash_file(${1:algo}, ${2:filename}${3:, ${4:raw_output}})
endsnippet

snippet hash_final "Finalize an incremental hash and return resulting digest" i
hash_final(${1:context}${2:, ${3:raw_output}})
endsnippet

snippet hash_hkdf "Generate a HKDF key derivation of a supplied key input" i
hash_hkdf(${1:ikm}, ${2:algo}${3:, ${4:length}${5:, ${6:string}${7:, ${8:salt}}}})
endsnippet

snippet hash_hmac "Generate a keyed hash value using the HMAC method" i
hash_hmac(${1:algo}, ${2:data}, ${3:key}${4:, ${5:raw_output}})
endsnippet

snippet hash_hmac_algos "Return a list of registered hashing algorithms suitable for hash_hmac" i
hash_hmac_algos()
endsnippet

snippet hash_hmac_file "Generate a keyed hash value using the HMAC method and the contents of a given file" i
hash_hmac_file(${1:algo}, ${2:filename}, ${3:key}${4:, ${5:raw_output}})
endsnippet

snippet hash_init "Initialize an incremental hashing context" i
hash_init(${1:algo}${2:, ${3:options}${4:, ${5:key}}})
endsnippet

snippet hash_pbkdf2 "Generate a PBKDF2 key derivation of a supplied password" i
hash_pbkdf2(${1:algo}, ${2:password}, ${3:salt}, ${4:iterations}${5:, ${6:length}${7:, ${8:raw_output}}})
endsnippet

snippet hash_update "Pump data into an active hashing context" i
hash_update(${1:context}, ${2:data})
endsnippet

snippet hash_update_file "Pump data into an active hashing context from a file" i
hash_update_file(${1:context}, ${2:filename}${3:, ${4:stream_context}})
endsnippet

snippet hash_update_stream "Pump data into an active hashing context from an open stream" i
hash_update_stream(${1:context}, ${2:handle}${3:, ${4:length}})
endsnippet

snippet header "Send a raw HTTP header" i
header(${1:header}${2:, ${3:replace}${4:, ${5:http_response_code}}})
endsnippet

snippet header_register_callback "Call a header function" i
header_register_callback(${1:callback})
endsnippet

snippet header_remove "Remove previously set headers" i
header_remove(${1:name})
endsnippet

snippet headers_list "Returns a list of response headers sent (or ready to send)" i
headers_list()
endsnippet

snippet headers_sent "Checks if or where headers have been sent" i
headers_sent(${1:&file}${2:, ${3:&line}})
endsnippet

snippet hebrev "Convert logical Hebrew text to visual text" i
hebrev(${1:str}${2:, ${3:max_chars_per_line}})
endsnippet

snippet hebrevc "Convert logical Hebrew text to visual text with newline conversion" i
hebrevc(${1:str}${2:, ${3:max_chars_per_line}})
endsnippet

snippet hex2bin "Decodes a hexadecimally encoded binary string" i
hex2bin(${1:data})
endsnippet

snippet hexdec "Hexadecimal to decimal" i
hexdec(${1:hexadecimal_number})
endsnippet

snippet highlight_file "Syntax highlighting of a file" i
highlight_file(${1:file_name}${2:, ${3:return}})
endsnippet

snippet highlight_string "Syntax highlighting of a string" i
highlight_string(${1:string}${2:, ${3:return}})
endsnippet

snippet hrtime "Get the system's high resolution time" i
hrtime(${1:get_as_number})
endsnippet

snippet html_entity_decode "Convert HTML entities to their corresponding characters" i
html_entity_decode(${1:string}${2:, ${3:quote_style}${4:, ${5:encoding}}})
endsnippet

snippet htmlentities "Convert all applicable characters to HTML entities" i
htmlentities(${1:string}${2:, ${3:quote_style}${4:, ${5:encoding}${6:, ${7:double_encode}}}})
endsnippet

snippet htmlspecialchars "Convert special characters to HTML entities" i
htmlspecialchars(${1:string}${2:, ${3:quote_style}${4:, ${5:encoding}${6:, ${7:double_encode}}}})
endsnippet

snippet htmlspecialchars_decode "Convert special HTML entities back to characters" i
htmlspecialchars_decode(${1:string}${2:, ${3:quote_style}})
endsnippet

snippet http_build_query "Generate URL-encoded query string" i
http_build_query(${1:formdata}${2:, ${3:prefix}${4:, ${5:arg_separator}${6:, ${7:enc_type}}}})
endsnippet

snippet http_response_code "Get or Set the HTTP response code" i
http_response_code(${1:response_code})
endsnippet

snippet hypot "Calculate the length of the hypotenuse of a right-angle triangle" i
hypot(${1:num1}, ${2:num2})
endsnippet

snippet iconv "Convert string to requested character encoding" i
iconv(${1:in_charset}, ${2:out_charset}, ${3:str})
endsnippet

snippet iconv_get_encoding "Retrieve internal configuration variables of iconv extension" i
iconv_get_encoding(${1:type})
endsnippet

snippet iconv_mime_decode "Decodes a MIME header field" i
iconv_mime_decode(${1:encoded_string}${2:, ${3:mode}${4:, ${5:charset}}})
endsnippet

snippet iconv_mime_decode_headers "Decodes multiple MIME header fields at once" i
iconv_mime_decode_headers(${1:headers}${2:, ${3:mode}${4:, ${5:charset}}})
endsnippet

snippet iconv_mime_encode "Composes a MIME header field" i
iconv_mime_encode(${1:field_name}, ${2:field_value}${3:, ${4:preference}})
endsnippet

snippet iconv_set_encoding "Set current setting for character encoding conversion" i
iconv_set_encoding(${1:type}, ${2:charset})
endsnippet

snippet iconv_strlen "Returns the character count of string" i
iconv_strlen(${1:str}${2:, ${3:charset}})
endsnippet

snippet iconv_strpos "Finds position of first occurrence of a needle within a haystack" i
iconv_strpos(${1:haystack}, ${2:needle}${3:, ${4:offset}${5:, ${6:charset}}})
endsnippet

snippet iconv_strrpos "Finds the last occurrence of a needle within a haystack" i
iconv_strrpos(${1:haystack}, ${2:needle}${3:, ${4:charset}})
endsnippet

snippet iconv_substr "Cut out part of a string" i
iconv_substr(${1:str}, ${2:offset}${3:, ${4:length}${5:, ${6:charset}}})
endsnippet

snippet idate "Format a local time/date as integer" i
idate(${1:format}${2:, ${3:timestamp}})
endsnippet

snippet idn_to_ascii "Convert domain name to IDNA ASCII form" i
idn_to_ascii(${1:domain}${2:, ${3:option}${4:, ${5:variant}${6:, ${7:&idn_info}}}})
endsnippet

snippet idn_to_utf8 "Convert domain name from IDNA ASCII to Unicode" i
idn_to_utf8(${1:domain}${2:, ${3:option}${4:, ${5:variant}${6:, ${7:&idn_info}}}})
endsnippet

snippet ignore_user_abort "Set whether a client disconnect should abort script execution" i
ignore_user_abort(${1:value})
endsnippet

snippet image_type_to_extension "Get file extension for image type" i
image_type_to_extension(${1:imagetype}${2:, ${3:include_dot}})
endsnippet

snippet image_type_to_mime_type "Get Mime-Type for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype" i
image_type_to_mime_type(${1:imagetype})
endsnippet

snippet imageaffine "Return an image containing the affine transformed src image, using an optional clipping area" i
imageaffine(${1:im}, ${2:affine}${3:, ${4:clip}})
endsnippet

snippet imageaffinematrixconcat "Concatenate two affine transformation matrices" i
imageaffinematrixconcat(${1:m1}, ${2:m2})
endsnippet

snippet imageaffinematrixget "Get an affine transformation matrix" i
imageaffinematrixget(${1:type}${2:, ${3:options}})
endsnippet

snippet imagealphablending "Set the blending mode for an image" i
imagealphablending(${1:im}, ${2:blend})
endsnippet

snippet imageantialias "Should antialias functions be used or not" i
imageantialias(${1:im}, ${2:on})
endsnippet

snippet imagearc "Draws an arc" i
imagearc(${1:im}, ${2:cx}, ${3:cy}, ${4:w}, ${5:h}, ${6:s}, ${7:e}, ${8:col})
endsnippet

snippet imagebmp "Output a BMP image to browser or file" i
imagebmp(${1:im}${2:, ${3:to}${4:, ${5:compressed}}})
endsnippet

snippet imagechar "Draw a character horizontally" i
imagechar(${1:im}, ${2:font}, ${3:x}, ${4:y}, ${5:c}, ${6:col})
endsnippet

snippet imagecharup "Draw a character vertically" i
imagecharup(${1:im}, ${2:font}, ${3:x}, ${4:y}, ${5:c}, ${6:col})
endsnippet

snippet imagecolorallocate "Allocate a color for an image" i
imagecolorallocate(${1:im}, ${2:red}, ${3:green}, ${4:blue})
endsnippet

snippet imagecolorallocatealpha "Allocate a color for an image" i
imagecolorallocatealpha(${1:im}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})
endsnippet

snippet imagecolorat "Get the index of the color of a pixel" i
imagecolorat(${1:im}, ${2:x}, ${3:y})
endsnippet

snippet imagecolorclosest "Get the index of the closest color to the specified color" i
imagecolorclosest(${1:im}, ${2:red}, ${3:green}, ${4:blue})
endsnippet

snippet imagecolorclosestalpha "Get the index of the closest color to the specified color + alpha" i
imagecolorclosestalpha(${1:im}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})
endsnippet

snippet imagecolorclosesthwb "Get the index of the color which has the hue, white and blackness" i
imagecolorclosesthwb(${1:im}, ${2:red}, ${3:green}, ${4:blue})
endsnippet

snippet imagecolordeallocate "De-allocate a color for an image" i
imagecolordeallocate(${1:im}, ${2:index})
endsnippet

snippet imagecolorexact "Get the index of the specified color" i
imagecolorexact(${1:im}, ${2:red}, ${3:green}, ${4:blue})
endsnippet

snippet imagecolorexactalpha "Get the index of the specified color + alpha" i
imagecolorexactalpha(${1:im}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})
endsnippet

snippet imagecolormatch "Makes the colors of the palette version of an image more closely match the true color version" i
imagecolormatch(${1:im1}, ${2:im2})
endsnippet

snippet imagecolorresolve "Get the index of the specified color or its closest possible alternative" i
imagecolorresolve(${1:im}, ${2:red}, ${3:green}, ${4:blue})
endsnippet

snippet imagecolorresolvealpha "Get the index of the specified color + alpha or its closest possible alternative" i
imagecolorresolvealpha(${1:im}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})
endsnippet

snippet imagecolorset "Set the color for the specified palette index" i
imagecolorset(${1:im}, ${2:color}, ${3:red}, ${4:green}, ${5:blue}${6:, ${7:alpha}})
endsnippet

snippet imagecolorsforindex "Get the colors for an index" i
imagecolorsforindex(${1:im}, ${2:index})
endsnippet

snippet imagecolorstotal "Find out the number of colors in an image's palette" i
imagecolorstotal(${1:im})
endsnippet

snippet imagecolortransparent "Define a color as transparent" i
imagecolortransparent(${1:im}${2:, ${3:col}})
endsnippet

snippet imageconvolution "Apply a 3x3 convolution matrix, using coefficient and offset" i
imageconvolution(${1:im}, ${2:matrix3x3}, ${3:div}, ${4:offset})
endsnippet

snippet imagecopy "Copy part of an image" i
imagecopy(${1:dst_im}, ${2:src_im}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:src_w}, ${8:src_h})
endsnippet

snippet imagecopymerge "Copy and merge part of an image" i
imagecopymerge(${1:src_im}, ${2:dst_im}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:src_w}, ${8:src_h}, ${9:pct})
endsnippet

snippet imagecopymergegray "Copy and merge part of an image with gray scale" i
imagecopymergegray(${1:src_im}, ${2:dst_im}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:src_w}, ${8:src_h}, ${9:pct})
endsnippet

snippet imagecopyresampled "Copy and resize part of an image with resampling" i
imagecopyresampled(${1:dst_im}, ${2:src_im}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:dst_w}, ${8:dst_h}, ${9:src_w}, ${10:src_h})
endsnippet

snippet imagecopyresized "Copy and resize part of an image" i
imagecopyresized(${1:dst_im}, ${2:src_im}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:dst_w}, ${8:dst_h}, ${9:src_w}, ${10:src_h})
endsnippet

snippet imagecreate "Create a new palette based image" i
imagecreate(${1:x_size}, ${2:y_size})
endsnippet

snippet imagecreatefrombmp "Create a new image from file or URL" i
imagecreatefrombmp(${1:filename})
endsnippet

snippet imagecreatefromgd "Create a new image from GD file or URL" i
imagecreatefromgd(${1:filename})
endsnippet

snippet imagecreatefromgd2 "Create a new image from GD2 file or URL" i
imagecreatefromgd2(${1:filename})
endsnippet

snippet imagecreatefromgd2part "Create a new image from a given part of GD2 file or URL" i
imagecreatefromgd2part(${1:filename}, ${2:srcX}, ${3:srcY}, ${4:width}, ${5:height})
endsnippet

snippet imagecreatefromgif "Create a new image from file or URL" i
imagecreatefromgif(${1:filename})
endsnippet

snippet imagecreatefromjpeg "Create a new image from file or URL" i
imagecreatefromjpeg(${1:filename})
endsnippet

snippet imagecreatefrompng "Create a new image from file or URL" i
imagecreatefrompng(${1:filename})
endsnippet

snippet imagecreatefromstring "Create a new image from the image stream in the string" i
imagecreatefromstring(${1:image})
endsnippet

snippet imagecreatefromwbmp "Create a new image from file or URL" i
imagecreatefromwbmp(${1:filename})
endsnippet

snippet imagecreatefromxbm "Create a new image from file or URL" i
imagecreatefromxbm(${1:filename})
endsnippet

snippet imagecreatetruecolor "Create a new true color image" i
imagecreatetruecolor(${1:x_size}, ${2:y_size})
endsnippet

snippet imagecrop "Crop an image to the given rectangle" i
imagecrop(${1:im}, ${2:rect})
endsnippet

snippet imagecropauto "Crop an image automatically using one of the available modes" i
imagecropauto(${1:im}${2:, ${3:mode}${4:, ${5:threshold}${6:, ${7:color}}}})
endsnippet

snippet imagedashedline "Draw a dashed line" i
imagedashedline(${1:im}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:col})
endsnippet

snippet imagedestroy "Destroy an image" i
imagedestroy(${1:im})
endsnippet

snippet imageellipse "Draw an ellipse" i
imageellipse(${1:im}, ${2:cx}, ${3:cy}, ${4:w}, ${5:h}, ${6:color})
endsnippet

snippet imagefill "Flood fill" i
imagefill(${1:im}, ${2:x}, ${3:y}, ${4:col})
endsnippet

snippet imagefilledarc "Draw a partial arc and fill it" i
imagefilledarc(${1:im}, ${2:cx}, ${3:cy}, ${4:w}, ${5:h}, ${6:s}, ${7:e}, ${8:col}, ${9:style})
endsnippet

snippet imagefilledellipse "Draw a filled ellipse" i
imagefilledellipse(${1:im}, ${2:cx}, ${3:cy}, ${4:w}, ${5:h}, ${6:color})
endsnippet

snippet imagefilledpolygon "Draw a filled polygon" i
imagefilledpolygon(${1:im}, ${2:points}, ${3:num_pos}, ${4:col})
endsnippet

snippet imagefilledrectangle "Draw a filled rectangle" i
imagefilledrectangle(${1:im}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:col})
endsnippet

snippet imagefilltoborder "Flood fill to specific color" i
imagefilltoborder(${1:im}, ${2:x}, ${3:y}, ${4:border}, ${5:col})
endsnippet

snippet imagefilter "Applies a filter to an image" i
imagefilter(${1:im}, ${2:filtertype}${3:, ${4:arg1}${5:, ${6:arg2}${7:, ${8:arg3}${9:, ${10:arg4}}}}})
endsnippet

snippet imageflip "Flips an image using a given mode" i
imageflip(${1:im}, ${2:mode})
endsnippet

snippet imagefontheight "Get font height" i
imagefontheight(${1:font})
endsnippet

snippet imagefontwidth "Get font width" i
imagefontwidth(${1:font})
endsnippet

snippet imagegammacorrect "Apply a gamma correction to a GD image" i
imagegammacorrect(${1:im}, ${2:inputgamma}, ${3:outputgamma})
endsnippet

snippet imagegd "Output GD image to browser or file" i
imagegd(${1:im}${2:, ${3:to}})
endsnippet

snippet imagegd2 "Output GD2 image to browser or file" i
imagegd2(${1:im}${2:, ${3:to}${4:, ${5:chunk_size}${6:, ${7:type}}}})
endsnippet

snippet imagegetclip "Get the clipping rectangle" i
imagegetclip(${1:im})
endsnippet

snippet imagegif "Output image to browser or file" i
imagegif(${1:im}${2:, ${3:to}})
endsnippet

snippet imageinterlace "Enable or disable interlace" i
imageinterlace(${1:im}${2:, ${3:interlace}})
endsnippet

snippet imageistruecolor "Finds whether an image is a truecolor image" i
imageistruecolor(${1:im})
endsnippet

snippet imagejpeg "Output image to browser or file" i
imagejpeg(${1:im}${2:, ${3:to}${4:, ${5:quality}}})
endsnippet

snippet imagelayereffect "Set the alpha blending flag to use layering effects" i
imagelayereffect(${1:im}, ${2:effect})
endsnippet

snippet imageline "Draw a line" i
imageline(${1:im}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:col})
endsnippet

snippet imageloadfont "Load a new font" i
imageloadfont(${1:filename})
endsnippet

snippet imageopenpolygon "Draws an open polygon" i
imageopenpolygon(${1:im}, ${2:points}, ${3:num_pos}, ${4:col})
endsnippet

snippet imagepalettecopy "Copy the palette from one image to another" i
imagepalettecopy(${1:dst}, ${2:src})
endsnippet

snippet imagepalettetotruecolor "Converts a palette based image to true color" i
imagepalettetotruecolor(${1:im})
endsnippet

snippet imagepng "Output a PNG image to either the browser or a file" i
imagepng(${1:im}${2:, ${3:to}${4:, ${5:quality}${6:, ${7:filters}}}})
endsnippet

snippet imagepolygon "Draws a polygon" i
imagepolygon(${1:im}, ${2:points}, ${3:num_pos}, ${4:col})
endsnippet

snippet imagerectangle "Draw a rectangle" i
imagerectangle(${1:im}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:col})
endsnippet

snippet imageresolution "Get or set the resolution of the image" i
imageresolution(${1:im}${2:, ${3:res_x}${4:, ${5:res_y}}})
endsnippet

snippet imagerotate "Rotate an image with a given angle" i
imagerotate(${1:im}, ${2:angle}, ${3:bgdcolor}${4:, ${5:ignoretransparent}})
endsnippet

snippet imagesavealpha "Whether to retain full alpha channel information when saving PNG images" i
imagesavealpha(${1:im}, ${2:save})
endsnippet

snippet imagescale "Scale an image using the given new width and height" i
imagescale(${1:im}, ${2:new_width}${3:, ${4:new_height}${5:, ${6:mode}}})
endsnippet

snippet imagesetbrush "Set the brush image for line drawing" i
imagesetbrush(${1:im}, ${2:brush})
endsnippet

snippet imagesetclip "Set the clipping rectangle" i
imagesetclip(${1:im}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2})
endsnippet

snippet imagesetinterpolation "Set the interpolation method" i
imagesetinterpolation(${1:im}${2:, ${3:method}})
endsnippet

snippet imagesetpixel "Set a single pixel" i
imagesetpixel(${1:im}, ${2:x}, ${3:y}, ${4:col})
endsnippet

snippet imagesetstyle "Set the style for line drawing" i
imagesetstyle(${1:im}, ${2:styles})
endsnippet

snippet imagesetthickness "Set the thickness for line drawing" i
imagesetthickness(${1:im}, ${2:thickness})
endsnippet

snippet imagesettile "Set the tile image for filling" i
imagesettile(${1:im}, ${2:tile})
endsnippet

snippet imagestring "Draw a string horizontally" i
imagestring(${1:im}, ${2:font}, ${3:x}, ${4:y}, ${5:str}, ${6:col})
endsnippet

snippet imagestringup "Draw a string vertically" i
imagestringup(${1:im}, ${2:font}, ${3:x}, ${4:y}, ${5:str}, ${6:col})
endsnippet

snippet imagesx "Get image width" i
imagesx(${1:im})
endsnippet

snippet imagesy "Get image height" i
imagesy(${1:im})
endsnippet

snippet imagetruecolortopalette "Convert a true color image to a palette image" i
imagetruecolortopalette(${1:im}, ${2:ditherFlag}, ${3:colorsWanted})
endsnippet

snippet imagetypes "Return the image types supported by this PHP build" i
imagetypes()
endsnippet

snippet imagewbmp "Output image to browser or file" i
imagewbmp(${1:im}${2:, ${3:to}${4:, ${5:foreground}}})
endsnippet

snippet imagexbm "Output an XBM image to browser or file" i
imagexbm(${1:im}, ${2:filename}${3:, ${4:foreground}})
endsnippet

snippet implode "Join array elements with a string" i
implode(${1:glue}, ${2:pieces})
endsnippet

snippet in_array "Checks if a value exists in an array" i
in_array(${1:needle}, ${2:haystack}${3:, ${4:strict}})
endsnippet

snippet inet_ntop "Converts a packed internet address to a human readable representation" i
inet_ntop(${1:in_addr})
endsnippet

snippet inet_pton "Converts a human readable IP address to its packed in_addr representation" i
inet_pton(${1:ip_address})
endsnippet

snippet inflate_add "Incrementally inflate encoded data" i
inflate_add(${1:context}, ${2:encoded_data}${3:, ${4:flush_mode}})
endsnippet

snippet inflate_get_read_len "Get number of bytes read so far" i
inflate_get_read_len(${1:resource})
endsnippet

snippet inflate_get_status "Get decompression status" i
inflate_get_status(${1:resource})
endsnippet

snippet inflate_init "Initialize an incremental inflate context" i
inflate_init(${1:encoding}${2:, ${3:options}})
endsnippet

snippet ini_alter "Alias of ini_set()" i
ini_alter(${1:varname}, ${2:newvalue})
endsnippet

snippet ini_get "Gets the value of a configuration option" i
ini_get(${1:varname})
endsnippet

snippet ini_get_all "Gets all configuration options" i
ini_get_all(${1:extension}${2:, ${3:details}})
endsnippet

snippet ini_restore "Restores the value of a configuration option" i
ini_restore(${1:varname})
endsnippet

snippet ini_set "Sets the value of a configuration option" i
ini_set(${1:varname}, ${2:newvalue})
endsnippet

snippet intdiv "Integer division" i
intdiv(${1:dividend}, ${2:divisor})
endsnippet

snippet interface_exists "Checks if the interface has been defined" i
interface_exists(${1:classname}${2:, ${3:autoload}})
endsnippet

snippet intl_error_name "Get symbolic name for a given error code" i
intl_error_name(${1:arg1})
endsnippet

snippet intl_get_error_code "Get the last error code" i
intl_get_error_code()
endsnippet

snippet intl_get_error_message "Get description of the last error" i
intl_get_error_message()
endsnippet

snippet intl_is_failure "Check whether the given error code indicates failure" i
intl_is_failure(${1:arg1})
endsnippet

snippet intlcal_add "" i
intlcal_add(${1:calendar}, ${2:field}, ${3:amount})
endsnippet

snippet intlcal_after "" i
intlcal_after(${1:calendar}, ${2:otherCalendar})
endsnippet

snippet intlcal_before "" i
intlcal_before(${1:calendar}, ${2:otherCalendar})
endsnippet

snippet intlcal_clear "" i
intlcal_clear(${1:calendar}${2:, ${3:field}})
endsnippet

snippet intlcal_create_instance "" i
intlcal_create_instance(${1:timeZone}${2:, ${3:locale}})
endsnippet

snippet intlcal_equals "" i
intlcal_equals(${1:calendar}, ${2:otherCalendar})
endsnippet

snippet intlcal_field_difference "" i
intlcal_field_difference(${1:calendar}, ${2:when}, ${3:field})
endsnippet

snippet intlcal_from_date_time "" i
intlcal_from_date_time(${1:dateTime})
endsnippet

snippet intlcal_get "" i
intlcal_get(${1:calendar}, ${2:field})
endsnippet

snippet intlcal_get_actual_maximum "" i
intlcal_get_actual_maximum(${1:calendar}, ${2:field})
endsnippet

snippet intlcal_get_actual_minimum "" i
intlcal_get_actual_minimum(${1:calendar}, ${2:field})
endsnippet

snippet intlcal_get_available_locales "" i
intlcal_get_available_locales()
endsnippet

snippet intlcal_get_day_of_week_type "" i
intlcal_get_day_of_week_type(${1:calendar}, ${2:dayOfWeek})
endsnippet

snippet intlcal_get_error_code "" i
intlcal_get_error_code(${1:calendar})
endsnippet

snippet intlcal_get_error_message "" i
intlcal_get_error_message(${1:calendar})
endsnippet

snippet intlcal_get_first_day_of_week "" i
intlcal_get_first_day_of_week(${1:calendar})
endsnippet

snippet intlcal_get_greatest_minimum "" i
intlcal_get_greatest_minimum(${1:calendar}, ${2:field})
endsnippet

snippet intlcal_get_keyword_values_for_locale "" i
intlcal_get_keyword_values_for_locale(${1:key}, ${2:locale}, ${3:commonlyUsed})
endsnippet

snippet intlcal_get_least_maximum "" i
intlcal_get_least_maximum(${1:calendar}, ${2:field})
endsnippet

snippet intlcal_get_locale "" i
intlcal_get_locale(${1:calendar}, ${2:localeType})
endsnippet

snippet intlcal_get_maximum "" i
intlcal_get_maximum(${1:calendar}, ${2:field})
endsnippet

snippet intlcal_get_minimal_days_in_first_week "" i
intlcal_get_minimal_days_in_first_week(${1:calendar})
endsnippet

snippet intlcal_get_minimum "" i
intlcal_get_minimum(${1:calendar}, ${2:field})
endsnippet

snippet intlcal_get_now "" i
intlcal_get_now()
endsnippet

snippet intlcal_get_repeated_wall_time_option "" i
intlcal_get_repeated_wall_time_option(${1:calendar})
endsnippet

snippet intlcal_get_skipped_wall_time_option "" i
intlcal_get_skipped_wall_time_option(${1:calendar})
endsnippet

snippet intlcal_get_time "" i
intlcal_get_time(${1:calendar})
endsnippet

snippet intlcal_get_time_zone "" i
intlcal_get_time_zone(${1:calendar})
endsnippet

snippet intlcal_get_type "" i
intlcal_get_type(${1:calendar})
endsnippet

snippet intlcal_get_weekend_transition "" i
intlcal_get_weekend_transition(${1:calendar}, ${2:dayOfWeek})
endsnippet

snippet intlcal_in_daylight_time "" i
intlcal_in_daylight_time(${1:calendar})
endsnippet

snippet intlcal_is_equivalent_to "" i
intlcal_is_equivalent_to(${1:calendar}, ${2:otherCalendar})
endsnippet

snippet intlcal_is_lenient "" i
intlcal_is_lenient(${1:calendar})
endsnippet

snippet intlcal_is_set "" i
intlcal_is_set(${1:calendar}, ${2:field})
endsnippet

snippet intlcal_is_weekend "" i
intlcal_is_weekend(${1:calendar}${2:, ${3:date}})
endsnippet

snippet intlcal_roll "" i
intlcal_roll(${1:calendar}, ${2:field}${3:, ${4:amountOrUpOrDown}})
endsnippet

snippet intlcal_set "" i
intlcal_set(${1:calendar}, ${2:fieldOrYear}, ${3:valueOrMonth}${4:, ${5:dayOfMonth}${6:, ${7:hour}${8:, ${9:minute}${10:, ${11:second}}}}})
endsnippet

snippet intlcal_set_first_day_of_week "" i
intlcal_set_first_day_of_week(${1:calendar}, ${2:dayOfWeek})
endsnippet

snippet intlcal_set_lenient "" i
intlcal_set_lenient(${1:calendar}, ${2:isLenient})
endsnippet

snippet intlcal_set_minimal_days_in_first_week "" i
intlcal_set_minimal_days_in_first_week(${1:calendar}, ${2:numberOfDays})
endsnippet

snippet intlcal_set_repeated_wall_time_option "" i
intlcal_set_repeated_wall_time_option(${1:calendar}, ${2:wallTimeOption})
endsnippet

snippet intlcal_set_skipped_wall_time_option "" i
intlcal_set_skipped_wall_time_option(${1:calendar}, ${2:wallTimeOption})
endsnippet

snippet intlcal_set_time "" i
intlcal_set_time(${1:calendar}, ${2:date})
endsnippet

snippet intlcal_set_time_zone "" i
intlcal_set_time_zone(${1:calendar}, ${2:timeZone})
endsnippet

snippet intlcal_to_date_time "" i
intlcal_to_date_time(${1:calendar})
endsnippet

snippet intlgregcal_create_instance "" i
intlgregcal_create_instance(${1:timeZoneOrYear}${2:, ${3:localeOrMonth}${4:, ${5:dayOfMonth}${6:, ${7:hour}${8:, ${9:minute}${10:, ${11:second}}}}}})
endsnippet

snippet intlgregcal_get_gregorian_change "" i
intlgregcal_get_gregorian_change(${1:calendar})
endsnippet

snippet intlgregcal_is_leap_year "" i
intlgregcal_is_leap_year(${1:calendar}, ${2:year})
endsnippet

snippet intlgregcal_set_gregorian_change "" i
intlgregcal_set_gregorian_change(${1:calendar}, ${2:date})
endsnippet

snippet intltz_count_equivalent_ids "" i
intltz_count_equivalent_ids(${1:zoneId})
endsnippet

snippet intltz_create_default "" i
intltz_create_default()
endsnippet

snippet intltz_create_enumeration "" i
intltz_create_enumeration(${1:countryOrRawOffset})
endsnippet

snippet intltz_create_time_zone "" i
intltz_create_time_zone(${1:zoneId})
endsnippet

snippet intltz_create_time_zone_id_enumeration "" i
intltz_create_time_zone_id_enumeration(${1:zoneType}${2:, ${3:region}${4:, ${5:rawOffset}}})
endsnippet

snippet intltz_from_date_time_zone "" i
intltz_from_date_time_zone(${1:dateTimeZone})
endsnippet

snippet intltz_get_canonical_id "" i
intltz_get_canonical_id(${1:zoneId}${2:, ${3:&isSystemID}})
endsnippet

snippet intltz_get_display_name "" i
intltz_get_display_name(${1:timeZone}${2:, ${3:isDaylight}${4:, ${5:style}${6:, ${7:locale}}}})
endsnippet

snippet intltz_get_dst_savings "" i
intltz_get_dst_savings(${1:timeZone})
endsnippet

snippet intltz_get_equivalent_id "" i
intltz_get_equivalent_id(${1:zoneId}, ${2:index})
endsnippet

snippet intltz_get_error_code "" i
intltz_get_error_code(${1:timeZone})
endsnippet

snippet intltz_get_error_message "" i
intltz_get_error_message(${1:timeZone})
endsnippet

snippet intltz_get_gmt "" i
intltz_get_gmt()
endsnippet

snippet intltz_get_id "" i
intltz_get_id(${1:timeZone})
endsnippet

snippet intltz_get_offset "" i
intltz_get_offset(${1:timeZone}, ${2:date}, ${3:local}, ${4:&rawOffset}, ${5:&dstOffset})
endsnippet

snippet intltz_get_raw_offset "" i
intltz_get_raw_offset(${1:timeZone})
endsnippet

snippet intltz_get_region "" i
intltz_get_region(${1:zoneId})
endsnippet

snippet intltz_get_tz_data_version "" i
intltz_get_tz_data_version()
endsnippet

snippet intltz_get_unknown "" i
intltz_get_unknown()
endsnippet

snippet intltz_has_same_rules "" i
intltz_has_same_rules(${1:timeZone}${2:, ${3:otherTimeZone}})
endsnippet

snippet intltz_to_date_time_zone "" i
intltz_to_date_time_zone(${1:timeZone})
endsnippet

snippet intltz_use_daylight_time "" i
intltz_use_daylight_time(${1:timeZone})
endsnippet

snippet intval "Get the integer value of a variable" i
intval(${1:var}${2:, ${3:base}})
endsnippet

snippet ip2long "Converts a string containing an (IPv4) Internet Protocol dotted address into a long integer" i
ip2long(${1:ip_address})
endsnippet

snippet iptcembed "Embeds binary IPTC data into a JPEG image" i
iptcembed(${1:iptcdata}, ${2:jpeg_file_name}${3:, ${4:spool}})
endsnippet

snippet iptcparse "Parse a binary IPTC block into single tags" i
iptcparse(${1:iptcdata})
endsnippet

snippet is_a "Checks if the object is of this class or has this class as one of its parents" i
is_a(${1:object}, ${2:class_name}${3:, ${4:allow_string}})
endsnippet

snippet is_array "Finds whether a variable is an array" i
is_array(${1:var})
endsnippet

snippet is_bool "Finds out whether a variable is a boolean" i
is_bool(${1:var})
endsnippet

snippet is_callable "Verify that the contents of a variable can be called as a function" i
is_callable(${1:var}${2:, ${3:syntax_only}${4:, ${5:&callable_name}}})
endsnippet

snippet is_countable "Verify that the contents of a variable is a countable value" i
is_countable(${1:var})
endsnippet

snippet is_dir "Tells whether the filename is a directory" i
is_dir(${1:filename})
endsnippet

snippet is_double "Alias of is_float()" i
is_double(${1:var})
endsnippet

snippet is_executable "Tells whether the filename is executable" i
is_executable(${1:filename})
endsnippet

snippet is_file "Tells whether the filename is a regular file" i
is_file(${1:filename})
endsnippet

snippet is_finite "Finds whether a value is a legal finite number" i
is_finite(${1:val})
endsnippet

snippet is_float "Finds whether the type of a variable is float" i
is_float(${1:var})
endsnippet

snippet is_infinite "Finds whether a value is infinite" i
is_infinite(${1:val})
endsnippet

snippet is_int "Find whether the type of a variable is integer" i
is_int(${1:var})
endsnippet

snippet is_integer "Alias of is_int()" i
is_integer(${1:var})
endsnippet

snippet is_iterable "Verify that the contents of a variable is an iterable value" i
is_iterable(${1:var})
endsnippet

snippet is_link "Tells whether the filename is a symbolic link" i
is_link(${1:filename})
endsnippet

snippet is_long "Alias of is_int()" i
is_long(${1:var})
endsnippet

snippet is_nan "Finds whether a value is not a number" i
is_nan(${1:val})
endsnippet

snippet is_null "Finds whether a variable is NULL" i
is_null(${1:var})
endsnippet

snippet is_numeric "Finds whether a variable is a number or a numeric string" i
is_numeric(${1:value})
endsnippet

snippet is_object "Finds whether a variable is an object" i
is_object(${1:var})
endsnippet

snippet is_readable "Tells whether a file exists and is readable" i
is_readable(${1:filename})
endsnippet

snippet is_real "Alias of is_float()" i
is_real(${1:var})
endsnippet

snippet is_resource "Finds whether a variable is a resource" i
is_resource(${1:var})
endsnippet

snippet is_scalar "Finds whether a variable is a scalar" i
is_scalar(${1:value})
endsnippet

snippet is_soap_fault "Checks if a SOAP call has failed" i
is_soap_fault(${1:object})
endsnippet

snippet is_string "Find whether the type of a variable is string" i
is_string(${1:var})
endsnippet

snippet is_subclass_of "Checks if the object has this class as one of its parents or implements it" i
is_subclass_of(${1:object}, ${2:class_name}${3:, ${4:allow_string}})
endsnippet

snippet is_uploaded_file "Tells whether the file was uploaded via HTTP POST" i
is_uploaded_file(${1:path})
endsnippet

snippet is_writable "Tells whether the filename is writable" i
is_writable(${1:filename})
endsnippet

snippet is_writeable "Alias of is_writable()" i
is_writeable(${1:filename})
endsnippet

snippet iterator_apply "Call a function for every element in an iterator" i
iterator_apply(${1:iterator}, ${2:function}${3:, ${4:(array) args}})
endsnippet

snippet iterator_count "Count the elements in an iterator" i
iterator_count(${1:iterator})
endsnippet

snippet iterator_to_array "Copy the iterator into an array" i
iterator_to_array(${1:iterator}${2:, ${3:use_keys}})
endsnippet

snippet jddayofweek "Returns the day of the week" i
jddayofweek(${1:juliandaycount}${2:, ${3:mode}})
endsnippet

snippet jdmonthname "Returns a month name" i
jdmonthname(${1:juliandaycount}, ${2:mode})
endsnippet

snippet jdtofrench "Converts a Julian Day Count to the French Republican Calendar" i
jdtofrench(${1:juliandaycount})
endsnippet

snippet jdtogregorian "Converts Julian Day Count to Gregorian date" i
jdtogregorian(${1:juliandaycount})
endsnippet

snippet jdtojewish "Converts a Julian day count to a Jewish calendar date" i
jdtojewish(${1:juliandaycount}${2:, ${3:hebrew}${4:, ${5:fl}}})
endsnippet

snippet jdtojulian "Converts a Julian Day Count to a Julian Calendar Date" i
jdtojulian(${1:juliandaycount})
endsnippet

snippet jdtounix "Convert Julian Day to Unix timestamp" i
jdtounix(${1:jday})
endsnippet

snippet jewishtojd "Converts a date in the Jewish Calendar to Julian Day Count" i
jewishtojd(${1:month}, ${2:day}, ${3:year})
endsnippet

snippet join "Alias of implode()" i
join(${1:glue}, ${2:pieces})
endsnippet

snippet json_decode "Decodes a JSON string" i
json_decode(${1:json}${2:, ${3:assoc}${4:, ${5:depth}${6:, ${7:options}}}})
endsnippet

snippet json_encode "Returns the JSON representation of a value" i
json_encode(${1:value}${2:, ${3:options}${4:, ${5:depth}}})
endsnippet

snippet json_last_error "Returns the last error occurred" i
json_last_error()
endsnippet

snippet json_last_error_msg "Returns the error string of the last json_encode() or json_decode() call" i
json_last_error_msg()
endsnippet

snippet juliantojd "Converts a Julian Calendar date to Julian Day Count" i
juliantojd(${1:month}, ${2:day}, ${3:year})
endsnippet

snippet key "Fetch a key from an array" i
key(${1:arg})
endsnippet

snippet key_exists "Alias of array_key_exists()" i
key_exists(${1:key}, ${2:search})
endsnippet

snippet krsort "Sort an array by key in reverse order" i
krsort(${1:&arg}${2:, ${3:sort_flags}})
endsnippet

snippet ksort "Sort an array by key" i
ksort(${1:&arg}${2:, ${3:sort_flags}})
endsnippet

snippet lcfirst "Make a string's first character lowercase" i
lcfirst(${1:str})
endsnippet

snippet lcg_value "Combined linear congruential generator" i
lcg_value()
endsnippet

snippet lchgrp "Changes group ownership of symlink" i
lchgrp(${1:filename}, ${2:group})
endsnippet

snippet lchown "Changes user ownership of symlink" i
lchown(${1:filename}, ${2:user})
endsnippet

snippet levenshtein "Calculate Levenshtein distance between two strings" i
levenshtein(${1:str1}, ${2:str2}${3:, ${4:cost_ins}${5:, ${6:cost_rep}${7:, ${8:cost_del}}}})
endsnippet

snippet libxml_clear_errors "Clear libxml error buffer" i
libxml_clear_errors()
endsnippet

snippet libxml_disable_entity_loader "Disable the ability to load external entities" i
libxml_disable_entity_loader(${1:disable})
endsnippet

snippet libxml_get_errors "Retrieve array of errors" i
libxml_get_errors()
endsnippet

snippet libxml_get_last_error "Retrieve last error from libxml" i
libxml_get_last_error()
endsnippet

snippet libxml_set_external_entity_loader "Changes the default external entity loader" i
libxml_set_external_entity_loader(${1:resolver_function})
endsnippet

snippet libxml_set_streams_context "Set the streams context for the next libxml document load or write" i
libxml_set_streams_context(${1:context})
endsnippet

snippet libxml_use_internal_errors "Disable libxml errors and allow user to fetch error information as needed" i
libxml_use_internal_errors(${1:use_errors})
endsnippet

snippet link "Create a hard link" i
link(${1:target}, ${2:link})
endsnippet

snippet linkinfo "Gets information about a link" i
linkinfo(${1:filename})
endsnippet

snippet locale_accept_from_http "" i
locale_accept_from_http(${1:arg1})
endsnippet

snippet locale_canonicalize "Canonicalize the locale string" i
locale_canonicalize(${1:arg1})
endsnippet

snippet locale_compose "" i
locale_compose(${1:arg1})
endsnippet

snippet locale_filter_matches "" i
locale_filter_matches(${1:langtag}, ${2:locale}${3:, ${4:canonicalize}})
endsnippet

snippet locale_get_all_variants "" i
locale_get_all_variants(${1:arg1})
endsnippet

snippet locale_get_default "" i
locale_get_default()
endsnippet

snippet locale_get_display_language "" i
locale_get_display_language(${1:locale}${2:, ${3:in_locale}})
endsnippet

snippet locale_get_display_name "" i
locale_get_display_name(${1:locale}${2:, ${3:in_locale}})
endsnippet

snippet locale_get_display_region "" i
locale_get_display_region(${1:locale}${2:, ${3:in_locale}})
endsnippet

snippet locale_get_display_script "" i
locale_get_display_script(${1:locale}${2:, ${3:in_locale}})
endsnippet

snippet locale_get_display_variant "" i
locale_get_display_variant(${1:locale}${2:, ${3:in_locale}})
endsnippet

snippet locale_get_keywords "" i
locale_get_keywords(${1:arg1})
endsnippet

snippet locale_get_primary_language "" i
locale_get_primary_language(${1:arg1})
endsnippet

snippet locale_get_region "" i
locale_get_region(${1:arg1})
endsnippet

snippet locale_get_script "" i
locale_get_script(${1:arg1})
endsnippet

snippet locale_lookup "Searches the language tag list for the best match to the language" i
locale_lookup(${1:langtag}, ${2:locale}${3:, ${4:canonicalize}${5:, ${6:def}}})
endsnippet

snippet locale_parse "" i
locale_parse(${1:arg1})
endsnippet

snippet locale_set_default "" i
locale_set_default(${1:arg1})
endsnippet

snippet localeconv "Get numeric formatting information" i
localeconv()
endsnippet

snippet localtime "Get the local time" i
localtime(${1:timestamp}${2:, ${3:associative_array}})
endsnippet

snippet log "Natural logarithm" i
log(${1:number}${2:, ${3:base}})
endsnippet

snippet log10 "Base-10 logarithm" i
log10(${1:number})
endsnippet

snippet log1p "Returns log(1 + number), computed in a way that is accurate even when the value of number is close to zero" i
log1p(${1:number})
endsnippet

snippet long2ip "Converts an long integer address into a string in (IPv4) Internet standard dotted format" i
long2ip(${1:proper_address})
endsnippet

snippet lstat "Gives information about a file or symbolic link" i
lstat(${1:filename})
endsnippet

snippet ltrim "Strip whitespace (or other characters) from the beginning of a string" i
ltrim(${1:str}${2:, ${3:character_mask}})
endsnippet

snippet mail "Send mail" i
mail(${1:to}, ${2:subject}, ${3:message}${4:, ${5:additional_headers}${6:, ${7:additional_parameters}}})
endsnippet

snippet max "Find highest value" i
max(${1:args})
endsnippet

snippet mb_check_encoding "Check if the string is valid for the specified encoding" i
mb_check_encoding(${1:var}${2:, ${3:encoding}})
endsnippet

snippet mb_chr "Get a specific character" i
mb_chr(${1:cp}${2:, ${3:encoding}})
endsnippet

snippet mb_convert_case "Perform case folding on a string" i
mb_convert_case(${1:sourcestring}, ${2:mode}${3:, ${4:encoding}})
endsnippet

snippet mb_convert_encoding "Convert character encoding" i
mb_convert_encoding(${1:str}, ${2:to}${3:, ${4:from}})
endsnippet

snippet mb_convert_kana "Convert kana one from another (zen-kaku, han-kaku and more)" i
mb_convert_kana(${1:str}${2:, ${3:option}${4:, ${5:encoding}}})
endsnippet

snippet mb_convert_variables "Convert character code in variable(s)" i
mb_convert_variables(${1:to}, ${2:from}, ${3:&vars})
endsnippet

snippet mb_decode_mimeheader "Decode string in MIME header field" i
mb_decode_mimeheader(${1:string})
endsnippet

snippet mb_decode_numericentity "Decode HTML numeric string reference to character" i
mb_decode_numericentity(${1:string}, ${2:convmap}${3:, ${4:encoding}})
endsnippet

snippet mb_detect_encoding "Detect character encoding" i
mb_detect_encoding(${1:str}${2:, ${3:encoding_list}${4:, ${5:strict}}})
endsnippet

snippet mb_detect_order "Set/Get character encoding detection order" i
mb_detect_order(${1:encoding})
endsnippet

snippet mb_encode_mimeheader "Encode string for MIME header" i
mb_encode_mimeheader(${1:str}${2:, ${3:charset}${4:, ${5:transfer}${6:, ${7:linefeed}${8:, ${9:indent}}}}})
endsnippet

snippet mb_encode_numericentity "Encode character to HTML numeric string reference" i
mb_encode_numericentity(${1:string}, ${2:convmap}${3:, ${4:encoding}${5:, ${6:is_hex}}})
endsnippet

snippet mb_encoding_aliases "Get aliases of a known encoding type" i
mb_encoding_aliases(${1:encoding})
endsnippet

snippet mb_ereg "Regular expression match with multibyte support" i
mb_ereg(${1:pattern}, ${2:string}${3:, ${4:&registers}})
endsnippet

snippet mb_ereg_match "Regular expression match for multibyte string" i
mb_ereg_match(${1:pattern}, ${2:string}${3:, ${4:option}})
endsnippet

snippet mb_ereg_replace "Replace regular expression with multibyte support" i
mb_ereg_replace(${1:pattern}, ${2:replacement}, ${3:string}${4:, ${5:option}})
endsnippet

snippet mb_ereg_replace_callback "Perform a regular expression search and replace with multibyte support using a callback" i
mb_ereg_replace_callback(${1:pattern}, ${2:callback}, ${3:string}${4:, ${5:option}})
endsnippet

snippet mb_ereg_search "Multibyte regular expression match for predefined multibyte string" i
mb_ereg_search(${1:pattern}${2:, ${3:option}})
endsnippet

snippet mb_ereg_search_getpos "Returns start point for next regular expression match" i
mb_ereg_search_getpos()
endsnippet

snippet mb_ereg_search_getregs "Retrieve the result from the last multibyte regular expression match" i
mb_ereg_search_getregs()
endsnippet

snippet mb_ereg_search_init "Setup string and regular expression for a multibyte regular expression match" i
mb_ereg_search_init(${1:string}${2:, ${3:pattern}${4:, ${5:option}}})
endsnippet

snippet mb_ereg_search_pos "Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string" i
mb_ereg_search_pos(${1:pattern}${2:, ${3:option}})
endsnippet

snippet mb_ereg_search_regs "Returns the matched part of a multibyte regular expression" i
mb_ereg_search_regs(${1:pattern}${2:, ${3:option}})
endsnippet

snippet mb_ereg_search_setpos "Set start point of next regular expression match" i
mb_ereg_search_setpos(${1:position})
endsnippet

snippet mb_eregi "Regular expression match ignoring case with multibyte support" i
mb_eregi(${1:pattern}, ${2:string}${3:, ${4:&registers}})
endsnippet

snippet mb_eregi_replace "Replace regular expression with multibyte support ignoring case" i
mb_eregi_replace(${1:pattern}, ${2:replacement}, ${3:string}${4:, ${5:option}})
endsnippet

snippet mb_get_info "Get internal settings of mbstring" i
mb_get_info(${1:type})
endsnippet

snippet mb_http_input "Detect HTTP input character encoding" i
mb_http_input(${1:type})
endsnippet

snippet mb_http_output "Set/Get HTTP output character encoding" i
mb_http_output(${1:encoding})
endsnippet

snippet mb_internal_encoding "Set/Get internal character encoding" i
mb_internal_encoding(${1:encoding})
endsnippet

snippet mb_language "Set/Get current language" i
mb_language(${1:language})
endsnippet

snippet mb_list_encodings "Returns an array of all supported encodings" i
mb_list_encodings()
endsnippet

snippet mb_ord "Get code point of character" i
mb_ord(${1:str}${2:, ${3:encoding}})
endsnippet

snippet mb_output_handler "Callback function converts character encoding in output buffer" i
mb_output_handler(${1:contents}, ${2:status})
endsnippet

snippet mb_parse_str "Parse GET/POST/COOKIE data and set global variable" i
mb_parse_str(${1:encoded_string}${2:, ${3:&result}})
endsnippet

snippet mb_preferred_mime_name "Get MIME charset string" i
mb_preferred_mime_name(${1:encoding})
endsnippet

snippet mb_regex_encoding "Set/Get character encoding for multibyte regex" i
mb_regex_encoding(${1:encoding})
endsnippet

snippet mb_regex_set_options "Set/Get the default options for mbregex functions" i
mb_regex_set_options(${1:options})
endsnippet

snippet mb_scrub "Description" i
mb_scrub(${1:str}${2:, ${3:encoding}})
endsnippet

snippet mb_send_mail "Send encoded mail" i
mb_send_mail(${1:to}, ${2:subject}, ${3:message}${4:, ${5:additional_headers}${6:, ${7:additional_parameters}}})
endsnippet

snippet mb_split "Split multibyte string using regular expression" i
mb_split(${1:pattern}, ${2:string}${3:, ${4:limit}})
endsnippet

snippet mb_strcut "Get part of string" i
mb_strcut(${1:str}, ${2:start}${3:, ${4:length}${5:, ${6:encoding}}})
endsnippet

snippet mb_strimwidth "Get truncated string with specified width" i
mb_strimwidth(${1:str}, ${2:start}, ${3:width}${4:, ${5:trimmarker}${6:, ${7:encoding}}})
endsnippet

snippet mb_stripos "Finds position of first occurrence of a string within another, case insensitive" i
mb_stripos(${1:haystack}, ${2:needle}${3:, ${4:offset}${5:, ${6:encoding}}})
endsnippet

snippet mb_stristr "Finds first occurrence of a string within another, case insensitive" i
mb_stristr(${1:haystack}, ${2:needle}${3:, ${4:part}${5:, ${6:encoding}}})
endsnippet

snippet mb_strlen "Get string length" i
mb_strlen(${1:str}${2:, ${3:encoding}})
endsnippet

snippet mb_strpos "Find position of first occurrence of string in a string" i
mb_strpos(${1:haystack}, ${2:needle}${3:, ${4:offset}${5:, ${6:encoding}}})
endsnippet

snippet mb_strrchr "Finds the last occurrence of a character in a string within another" i
mb_strrchr(${1:haystack}, ${2:needle}${3:, ${4:part}${5:, ${6:encoding}}})
endsnippet

snippet mb_strrichr "Finds the last occurrence of a character in a string within another, case insensitive" i
mb_strrichr(${1:haystack}, ${2:needle}${3:, ${4:part}${5:, ${6:encoding}}})
endsnippet

snippet mb_strripos "Finds position of last occurrence of a string within another, case insensitive" i
mb_strripos(${1:haystack}, ${2:needle}${3:, ${4:offset}${5:, ${6:encoding}}})
endsnippet

snippet mb_strrpos "Find position of last occurrence of a string in a string" i
mb_strrpos(${1:haystack}, ${2:needle}${3:, ${4:offset}${5:, ${6:encoding}}})
endsnippet

snippet mb_strstr "Finds first occurrence of a string within another" i
mb_strstr(${1:haystack}, ${2:needle}${3:, ${4:part}${5:, ${6:encoding}}})
endsnippet

snippet mb_strtolower "Make a string lowercase" i
mb_strtolower(${1:sourcestring}${2:, ${3:encoding}})
endsnippet

snippet mb_strtoupper "Make a string uppercase" i
mb_strtoupper(${1:sourcestring}${2:, ${3:encoding}})
endsnippet

snippet mb_strwidth "Return width of string" i
mb_strwidth(${1:str}${2:, ${3:encoding}})
endsnippet

snippet mb_substitute_character "Set/Get substitution character" i
mb_substitute_character(${1:substchar})
endsnippet

snippet mb_substr "Get part of string" i
mb_substr(${1:str}, ${2:start}${3:, ${4:length}${5:, ${6:encoding}}})
endsnippet

snippet mb_substr_count "Count the number of substring occurrences" i
mb_substr_count(${1:haystack}, ${2:needle}${3:, ${4:encoding}})
endsnippet

snippet md5 "Calculate the md5 hash of a string" i
md5(${1:str}${2:, ${3:raw_output}})
endsnippet

snippet md5_file "Calculates the md5 hash of a given file" i
md5_file(${1:filename}${2:, ${3:raw_output}})
endsnippet

snippet memory_get_peak_usage "Returns the peak of memory allocated by PHP" i
memory_get_peak_usage(${1:real_usage})
endsnippet

snippet memory_get_usage "Returns the amount of memory allocated to PHP" i
memory_get_usage(${1:real_usage})
endsnippet

snippet metaphone "Calculate the metaphone key of a string" i
metaphone(${1:text}${2:, ${3:phones}})
endsnippet

snippet method_exists "Checks if the class method exists" i
method_exists(${1:object}, ${2:method})
endsnippet

snippet mhash "Computes hash" i
mhash(${1:hash}, ${2:data}${3:, ${4:key}})
endsnippet

snippet mhash_count "Gets the highest available hash ID" i
mhash_count()
endsnippet

snippet mhash_get_block_size "Gets the block size of the specified hash" i
mhash_get_block_size(${1:hash})
endsnippet

snippet mhash_get_hash_name "Gets the name of the specified hash" i
mhash_get_hash_name(${1:hash})
endsnippet

snippet mhash_keygen_s2k "Generates a key" i
mhash_keygen_s2k(${1:hash}, ${2:input_password}, ${3:salt}, ${4:bytes})
endsnippet

snippet microtime "Return current Unix timestamp with microseconds" i
microtime(${1:get_as_float})
endsnippet

snippet mime_content_type "Detect MIME Content-type for a file" i
mime_content_type(${1:string})
endsnippet

snippet min "Find lowest value" i
min(${1:args})
endsnippet

snippet mkdir "Makes directory" i
mkdir(${1:pathname}${2:, ${3:mode}${4:, ${5:recursive}${6:, ${7:context}}}})
endsnippet

snippet mktime "Get Unix timestamp for a date" i
mktime(${1:hour}${2:, ${3:min}${4:, ${5:sec}${6:, ${7:mon}${8:, ${9:day}${10:, ${11:year}}}}}})
endsnippet

snippet money_format "Formats a number as a currency string" i
money_format(${1:format}, ${2:value})
endsnippet

snippet move_uploaded_file "Moves an uploaded file to a new location" i
move_uploaded_file(${1:path}, ${2:new_path})
endsnippet

snippet msg_get_queue "Create or attach to a message queue" i
msg_get_queue(${1:key}${2:, ${3:perms}})
endsnippet

snippet msg_queue_exists "Check whether a message queue exists" i
msg_queue_exists(${1:key})
endsnippet

snippet msg_receive "Receive a message from a message queue" i
msg_receive(${1:queue}, ${2:desiredmsgtype}, ${3:&msgtype}, ${4:maxsize}, ${5:&message}${6:, ${7:unserialize}${8:, ${9:flags}${10:, ${11:&errorcode}}}})
endsnippet

snippet msg_remove_queue "Destroy a message queue" i
msg_remove_queue(${1:queue})
endsnippet

snippet msg_send "Send a message to a message queue" i
msg_send(${1:queue}, ${2:msgtype}, ${3:message}${4:, ${5:serialize}${6:, ${7:blocking}${8:, ${9:&errorcode}}}})
endsnippet

snippet msg_set_queue "Set information in the message queue data structure" i
msg_set_queue(${1:queue}, ${2:data})
endsnippet

snippet msg_stat_queue "Returns information from the message queue data structure" i
msg_stat_queue(${1:queue})
endsnippet

snippet msgfmt_create "" i
msgfmt_create(${1:locale}, ${2:pattern})
endsnippet

snippet msgfmt_format "" i
msgfmt_format(${1:nf}, ${2:args})
endsnippet

snippet msgfmt_format_message "" i
msgfmt_format_message(${1:locale}, ${2:pattern}, ${3:args})
endsnippet

snippet msgfmt_get_error_code "" i
msgfmt_get_error_code(${1:nf})
endsnippet

snippet msgfmt_get_error_message "" i
msgfmt_get_error_message(${1:coll})
endsnippet

snippet msgfmt_get_locale "" i
msgfmt_get_locale(${1:mf})
endsnippet

snippet msgfmt_get_pattern "" i
msgfmt_get_pattern(${1:mf})
endsnippet

snippet msgfmt_parse "" i
msgfmt_parse(${1:nf}, ${2:source})
endsnippet

snippet msgfmt_parse_message "" i
msgfmt_parse_message(${1:locale}, ${2:pattern}, ${3:source})
endsnippet

snippet msgfmt_set_pattern "" i
msgfmt_set_pattern(${1:mf}, ${2:pattern})
endsnippet

snippet mt_getrandmax "Show largest possible random value" i
mt_getrandmax()
endsnippet

snippet mt_rand "Generate a random value via the Mersenne Twister Random Number Generator" i
mt_rand(${1:min}${2:, ${3:max}})
endsnippet

snippet mt_srand "Seeds the Mersenne Twister Random Number Generator" i
mt_srand(${1:seed}${2:, ${3:mode}})
endsnippet

snippet mysqli_affected_rows "" i
mysqli_affected_rows(${1:link})
endsnippet

snippet mysqli_autocommit "Turns on or off auto-committing database modifications" i
mysqli_autocommit(${1:link}, ${2:mode})
endsnippet

snippet mysqli_begin_transaction "" i
mysqli_begin_transaction(${1:link}${2:, ${3:flags}${4:, ${5:name}}})
endsnippet

snippet mysqli_change_user "" i
mysqli_change_user(${1:link}, ${2:user}, ${3:password}, ${4:database})
endsnippet

snippet mysqli_character_set_name "" i
mysqli_character_set_name(${1:link})
endsnippet

snippet mysqli_close "Closes a previously opened database connection" i
mysqli_close(${1:link})
endsnippet

snippet mysqli_commit "Commits the current transaction" i
mysqli_commit(${1:link}${2:, ${3:flags}${4:, ${5:name}}})
endsnippet

snippet mysqli_connect "Alias of mysqli::__construct()" i
mysqli_connect(${1:host}${2:, ${3:user}${4:, ${5:password}${6:, ${7:database}${8:, ${9:port}${10:, ${11:socket}}}}}})
endsnippet

snippet mysqli_connect_errno "" i
mysqli_connect_errno()
endsnippet

snippet mysqli_connect_error "" i
mysqli_connect_error()
endsnippet

snippet mysqli_data_seek "" i
mysqli_data_seek(${1:result}, ${2:offset})
endsnippet

snippet mysqli_debug "Performs debugging operations" i
mysqli_debug(${1:debug_options})
endsnippet

snippet mysqli_dump_debug_info "" i
mysqli_dump_debug_info(${1:link})
endsnippet

snippet mysqli_errno "Returns the error code for the most recent function call" i
mysqli_errno(${1:link})
endsnippet

snippet mysqli_error "Returns a string description of the last error" i
mysqli_error(${1:link})
endsnippet

snippet mysqli_error_list "" i
mysqli_error_list(${1:link})
endsnippet

snippet mysqli_escape_string "Alias of mysqli_real_escape_string()" i
mysqli_escape_string(${1:link}, ${2:query}${3:, ${4:resultmode}})
endsnippet

snippet mysqli_execute "Alias for mysqli_stmt_execute()" i
mysqli_execute(${1:stmt})
endsnippet

snippet mysqli_fetch_all "" i
mysqli_fetch_all(${1:result}${2:, ${3:result_type}})
endsnippet

snippet mysqli_fetch_array "" i
mysqli_fetch_array(${1:result}${2:, ${3:result_type}})
endsnippet

snippet mysqli_fetch_assoc "" i
mysqli_fetch_assoc(${1:result})
endsnippet

snippet mysqli_fetch_field "" i
mysqli_fetch_field(${1:result})
endsnippet

snippet mysqli_fetch_field_direct "" i
mysqli_fetch_field_direct(${1:result}, ${2:field_nr})
endsnippet

snippet mysqli_fetch_fields "" i
mysqli_fetch_fields(${1:result})
endsnippet

snippet mysqli_fetch_lengths "" i
mysqli_fetch_lengths(${1:result})
endsnippet

snippet mysqli_fetch_object "" i
mysqli_fetch_object(${1:result}${2:, ${3:class_name}${4:, ${5:(array) params}}})
endsnippet

snippet mysqli_fetch_row "" i
mysqli_fetch_row(${1:result})
endsnippet

snippet mysqli_field_count "" i
mysqli_field_count(${1:link})
endsnippet

snippet mysqli_field_seek "" i
mysqli_field_seek(${1:result}, ${2:field_nr})
endsnippet

snippet mysqli_field_tell "" i
mysqli_field_tell(${1:result})
endsnippet

snippet mysqli_free_result "" i
mysqli_free_result(${1:result})
endsnippet

snippet mysqli_get_charset "" i
mysqli_get_charset(${1:link})
endsnippet

snippet mysqli_get_client_info "" i
mysqli_get_client_info()
endsnippet

snippet mysqli_get_client_stats "Returns client per-process statistics" i
mysqli_get_client_stats()
endsnippet

snippet mysqli_get_client_version "" i
mysqli_get_client_version(${1:link})
endsnippet

snippet mysqli_get_connection_stats "" i
mysqli_get_connection_stats(${1:link})
endsnippet

snippet mysqli_get_host_info "" i
mysqli_get_host_info(${1:link})
endsnippet

snippet mysqli_get_links_stats "Return information about open and cached links" i
mysqli_get_links_stats()
endsnippet

snippet mysqli_get_proto_info "" i
mysqli_get_proto_info(${1:link})
endsnippet

snippet mysqli_get_server_info "" i
mysqli_get_server_info(${1:link})
endsnippet

snippet mysqli_get_server_version "" i
mysqli_get_server_version(${1:link})
endsnippet

snippet mysqli_get_warnings "" i
mysqli_get_warnings(${1:link})
endsnippet

snippet mysqli_info "Retrieves information about the most recently executed query" i
mysqli_info(${1:link})
endsnippet

snippet mysqli_init "Initializes MySQLi and returns a resource for use with mysqli_real_connect()" i
mysqli_init()
endsnippet

snippet mysqli_insert_id "" i
mysqli_insert_id(${1:link})
endsnippet

snippet mysqli_kill "Asks the server to kill a MySQL thread" i
mysqli_kill(${1:link}, ${2:connection_id})
endsnippet

snippet mysqli_more_results "" i
mysqli_more_results(${1:link})
endsnippet

snippet mysqli_multi_query "" i
mysqli_multi_query(${1:link}${2:, ${3:query}})
endsnippet

snippet mysqli_next_result "" i
mysqli_next_result(${1:link})
endsnippet

snippet mysqli_num_fields "" i
mysqli_num_fields(${1:result})
endsnippet

snippet mysqli_num_rows "" i
mysqli_num_rows(${1:result})
endsnippet

snippet mysqli_options "Set options" i
mysqli_options(${1:link}, ${2:option}, ${3:value})
endsnippet

snippet mysqli_ping "Pings a server connection, or tries to reconnect if the connection has gone down" i
mysqli_ping(${1:link})
endsnippet

snippet mysqli_poll "Poll connections" i
mysqli_poll(${1:&(array) read}, ${2:&(array) write}, ${3:&(array) error}, ${4:sec}${5:, ${6:usec}})
endsnippet

snippet mysqli_prepare "Prepare an SQL statement for execution" i
mysqli_prepare(${1:link}, ${2:query})
endsnippet

snippet mysqli_query "Performs a query on the database" i
mysqli_query(${1:link}, ${2:query}${3:, ${4:resultmode}})
endsnippet

snippet mysqli_real_connect "" i
mysqli_real_connect(${1:link}${2:, ${3:host}${4:, ${5:user}${6:, ${7:password}${8:, ${9:database}${10:, ${11:port}${12:, ${13:socket}${14:, ${15:flags}}}}}}}})
endsnippet

snippet mysqli_real_escape_string "" i
mysqli_real_escape_string(${1:link}, ${2:string_to_escape})
endsnippet

snippet mysqli_real_query "" i
mysqli_real_query(${1:link}${2:, ${3:query}})
endsnippet

snippet mysqli_reap_async_query "" i
mysqli_reap_async_query(${1:link})
endsnippet

snippet mysqli_refresh "Refreshes" i
mysqli_refresh(${1:link}, ${2:options})
endsnippet

snippet mysqli_release_savepoint "" i
mysqli_release_savepoint(${1:link}, ${2:name})
endsnippet

snippet mysqli_report "Alias of mysqli_driver->report_mode" i
mysqli_report(${1:flags})
endsnippet

snippet mysqli_rollback "Rolls back current transaction" i
mysqli_rollback(${1:link}${2:, ${3:flags}${4:, ${5:name}}})
endsnippet

snippet mysqli_savepoint "Set a named transaction savepoint" i
mysqli_savepoint(${1:link}, ${2:name})
endsnippet

snippet mysqli_select_db "" i
mysqli_select_db(${1:link}, ${2:database})
endsnippet

snippet mysqli_set_charset "" i
mysqli_set_charset(${1:link}, ${2:charset})
endsnippet

snippet mysqli_set_opt "Alias of mysqli_options()" i
mysqli_set_opt()
endsnippet

snippet mysqli_sqlstate "Returns the SQLSTATE error from previous MySQL operation" i
mysqli_sqlstate(${1:link})
endsnippet

snippet mysqli_ssl_set "" i
mysqli_ssl_set(${1:link}, ${2:key}, ${3:cert}, ${4:certificate_authority}, ${5:certificate_authority_path}, ${6:cipher})
endsnippet

snippet mysqli_stat "Gets the current system status" i
mysqli_stat(${1:link})
endsnippet

snippet mysqli_stmt_affected_rows "" i
mysqli_stmt_affected_rows(${1:stmt})
endsnippet

snippet mysqli_stmt_attr_get "" i
mysqli_stmt_attr_get(${1:stmt}, ${2:attribute})
endsnippet

snippet mysqli_stmt_attr_set "" i
mysqli_stmt_attr_set(${1:stmt}, ${2:attribute}, ${3:value})
endsnippet

snippet mysqli_stmt_bind_param "" i
mysqli_stmt_bind_param(${1:stmt}, ${2:types}, ${3:&vars})
endsnippet

snippet mysqli_stmt_bind_result "" i
mysqli_stmt_bind_result(${1:stmt}, ${2:&vars})
endsnippet

snippet mysqli_stmt_close "Closes a prepared statement" i
mysqli_stmt_close(${1:stmt})
endsnippet

snippet mysqli_stmt_data_seek "" i
mysqli_stmt_data_seek(${1:stmt}, ${2:offset})
endsnippet

snippet mysqli_stmt_errno "Returns the error code for the most recent statement call" i
mysqli_stmt_errno(${1:stmt})
endsnippet

snippet mysqli_stmt_error "Returns a string description for last statement error" i
mysqli_stmt_error(${1:stmt})
endsnippet

snippet mysqli_stmt_error_list "" i
mysqli_stmt_error_list(${1:stmt})
endsnippet

snippet mysqli_stmt_execute "Executes a prepared Query" i
mysqli_stmt_execute(${1:stmt})
endsnippet

snippet mysqli_stmt_fetch "Fetch results from a prepared statement into the bound variables" i
mysqli_stmt_fetch(${1:stmt})
endsnippet

snippet mysqli_stmt_field_count "" i
mysqli_stmt_field_count(${1:stmt})
endsnippet

snippet mysqli_stmt_free_result "" i
mysqli_stmt_free_result(${1:stmt})
endsnippet

snippet mysqli_stmt_get_result "" i
mysqli_stmt_get_result(${1:stmt})
endsnippet

snippet mysqli_stmt_get_warnings "" i
mysqli_stmt_get_warnings(${1:stmt})
endsnippet

snippet mysqli_stmt_init "" i
mysqli_stmt_init(${1:link})
endsnippet

snippet mysqli_stmt_insert_id "" i
mysqli_stmt_insert_id(${1:stmt})
endsnippet

snippet mysqli_stmt_more_results "" i
mysqli_stmt_more_results(${1:stmt})
endsnippet

snippet mysqli_stmt_next_result "" i
mysqli_stmt_next_result(${1:stmt})
endsnippet

snippet mysqli_stmt_num_rows "" i
mysqli_stmt_num_rows(${1:stmt})
endsnippet

snippet mysqli_stmt_param_count "" i
mysqli_stmt_param_count(${1:stmt})
endsnippet

snippet mysqli_stmt_prepare "Prepare an SQL statement for execution" i
mysqli_stmt_prepare(${1:stmt}, ${2:query})
endsnippet

snippet mysqli_stmt_reset "Resets a prepared statement" i
mysqli_stmt_reset(${1:stmt})
endsnippet

snippet mysqli_stmt_result_metadata "" i
mysqli_stmt_result_metadata(${1:stmt})
endsnippet

snippet mysqli_stmt_send_long_data "" i
mysqli_stmt_send_long_data(${1:stmt}, ${2:param_nr}, ${3:data})
endsnippet

snippet mysqli_stmt_sqlstate "Returns SQLSTATE error from previous statement operation" i
mysqli_stmt_sqlstate(${1:stmt})
endsnippet

snippet mysqli_stmt_store_result "" i
mysqli_stmt_store_result(${1:stmt})
endsnippet

snippet mysqli_store_result "" i
mysqli_store_result(${1:link}${2:, ${3:flags}})
endsnippet

snippet mysqli_thread_id "" i
mysqli_thread_id(${1:link})
endsnippet

snippet mysqli_thread_safe "" i
mysqli_thread_safe()
endsnippet

snippet mysqli_use_result "" i
mysqli_use_result(${1:link})
endsnippet

snippet mysqli_warning_count "" i
mysqli_warning_count(${1:link})
endsnippet

snippet natcasesort "Sort an array using a case insensitive natural order algorithm" i
natcasesort(${1:&arg})
endsnippet

snippet natsort "Sort an array using a natural order algorithm" i
natsort(${1:&arg})
endsnippet

snippet net_get_interfaces "" i
net_get_interfaces()
endsnippet

snippet next "Advance the internal pointer of an array" i
next(${1:&arg})
endsnippet

snippet ngettext "Plural version of gettext" i
ngettext(${1:msgid1}, ${2:msgid2}, ${3:count})
endsnippet

snippet nl2br "Inserts HTML line breaks before all newlines in a string" i
nl2br(${1:str}${2:, ${3:is_xhtml}})
endsnippet

snippet nl_langinfo "Query language and locale information" i
nl_langinfo(${1:item})
endsnippet

snippet normalizer_get_raw_decomposition "" i
normalizer_get_raw_decomposition(${1:input})
endsnippet

snippet normalizer_is_normalized "" i
normalizer_is_normalized(${1:input}${2:, ${3:form}})
endsnippet

snippet normalizer_normalize "Normalizes the input provided and returns the normalized string" i
normalizer_normalize(${1:input}${2:, ${3:form}})
endsnippet

snippet number_format "Format a number with grouped thousands" i
number_format(${1:number}${2:, ${3:num_decimal_places}${4:, ${5:dec_separator}${6:, ${7:thousands_separator}}}})
endsnippet

snippet numfmt_create "" i
numfmt_create(${1:locale}, ${2:style}${3:, ${4:pattern}})
endsnippet

snippet numfmt_format "" i
numfmt_format(${1:nf}, ${2:num}${3:, ${4:type}})
endsnippet

snippet numfmt_format_currency "" i
numfmt_format_currency(${1:nf}, ${2:num}, ${3:currency})
endsnippet

snippet numfmt_get_attribute "" i
numfmt_get_attribute(${1:nf}, ${2:attr})
endsnippet

snippet numfmt_get_error_code "" i
numfmt_get_error_code(${1:nf})
endsnippet

snippet numfmt_get_error_message "" i
numfmt_get_error_message(${1:nf})
endsnippet

snippet numfmt_get_locale "" i
numfmt_get_locale(${1:nf}${2:, ${3:type}})
endsnippet

snippet numfmt_get_pattern "" i
numfmt_get_pattern(${1:nf})
endsnippet

snippet numfmt_get_symbol "" i
numfmt_get_symbol(${1:nf}, ${2:attr})
endsnippet

snippet numfmt_get_text_attribute "" i
numfmt_get_text_attribute(${1:nf}, ${2:attr})
endsnippet

snippet numfmt_parse "" i
numfmt_parse(${1:formatter}, ${2:string}${3:, ${4:type}${5:, ${6:&position}}})
endsnippet

snippet numfmt_parse_currency "" i
numfmt_parse_currency(${1:formatter}, ${2:string}, ${3:&currency}${4:, ${5:&position}})
endsnippet

snippet numfmt_set_attribute "" i
numfmt_set_attribute(${1:nf}, ${2:attr}, ${3:value})
endsnippet

snippet numfmt_set_pattern "" i
numfmt_set_pattern(${1:nf}, ${2:pattern})
endsnippet

snippet numfmt_set_symbol "" i
numfmt_set_symbol(${1:nf}, ${2:attr}, ${3:symbol})
endsnippet

snippet numfmt_set_text_attribute "" i
numfmt_set_text_attribute(${1:nf}, ${2:attr}, ${3:value})
endsnippet

snippet ob_clean "Clean (erase) the output buffer" i
ob_clean()
endsnippet

snippet ob_end_clean "Clean (erase) the output buffer and turn off output buffering" i
ob_end_clean()
endsnippet

snippet ob_end_flush "Flush (send) the output buffer and turn off output buffering" i
ob_end_flush()
endsnippet

snippet ob_flush "Flush (send) the output buffer" i
ob_flush()
endsnippet

snippet ob_get_clean "Get current buffer contents and delete current output buffer" i
ob_get_clean()
endsnippet

snippet ob_get_contents "Return the contents of the output buffer" i
ob_get_contents()
endsnippet

snippet ob_get_flush "Flush the output buffer, return it as a string and turn off output buffering" i
ob_get_flush()
endsnippet

snippet ob_get_length "Return the length of the output buffer" i
ob_get_length()
endsnippet

snippet ob_get_level "Return the nesting level of the output buffering mechanism" i
ob_get_level()
endsnippet

snippet ob_get_status "Get status of output buffers" i
ob_get_status(${1:full_status})
endsnippet

snippet ob_gzhandler "ob_start callback function to gzip output buffer" i
ob_gzhandler(${1:data}, ${2:flags})
endsnippet

snippet ob_implicit_flush "Turn implicit flush on/off" i
ob_implicit_flush(${1:flag})
endsnippet

snippet ob_list_handlers "List all output handlers in use" i
ob_list_handlers()
endsnippet

snippet ob_start "Turn on output buffering" i
ob_start(${1:user_function}${2:, ${3:chunk_size}${4:, ${5:flags}}})
endsnippet

snippet octdec "Octal to decimal" i
octdec(${1:octal_number})
endsnippet

snippet opcache_compile_file "Compiles and caches a PHP script without executing it" i
opcache_compile_file(${1:file})
endsnippet

snippet opcache_get_configuration "Get configuration information about the cache" i
opcache_get_configuration()
endsnippet

snippet opcache_get_status "Get status information about the cache" i
opcache_get_status(${1:fetch_scripts})
endsnippet

snippet opcache_invalidate "Invalidates a cached script" i
opcache_invalidate(${1:script}${2:, ${3:force}})
endsnippet

snippet opcache_is_script_cached "Tells whether a script is cached in OPCache" i
opcache_is_script_cached(${1:script})
endsnippet

snippet opcache_reset "Resets the contents of the opcode cache" i
opcache_reset()
endsnippet

snippet opendir "Open directory handle" i
opendir(${1:path}${2:, ${3:context}})
endsnippet

snippet openlog "Open connection to system logger" i
openlog(${1:ident}, ${2:option}, ${3:facility})
endsnippet

snippet openssl_cipher_iv_length "Gets the cipher iv length" i
openssl_cipher_iv_length(${1:method})
endsnippet

snippet openssl_csr_export "Exports a CSR as a string" i
openssl_csr_export(${1:csr}, ${2:&out}${3:, ${4:notext}})
endsnippet

snippet openssl_csr_export_to_file "Exports a CSR to a file" i
openssl_csr_export_to_file(${1:csr}, ${2:outfilename}${3:, ${4:notext}})
endsnippet

snippet openssl_csr_get_public_key "Returns the public key of a CSR" i
openssl_csr_get_public_key(${1:csr}${2:, ${3:use_shortnames}})
endsnippet

snippet openssl_csr_get_subject "Returns the subject of a CSR" i
openssl_csr_get_subject(${1:csr}${2:, ${3:use_shortnames}})
endsnippet

snippet openssl_csr_new "Generates a CSR" i
openssl_csr_new(${1:dn}, ${2:&privkey}${3:, ${4:configargs}${5:, ${6:extraattribs}}})
endsnippet

snippet openssl_csr_sign "Sign a CSR with another certificate (or itself) and generate a certificate" i
openssl_csr_sign(${1:csr}, ${2:x509}, ${3:priv_key}, ${4:days}${5:, ${6:config_args}${7:, ${8:serial}}})
endsnippet

snippet openssl_decrypt "Decrypts data" i
openssl_decrypt(${1:data}, ${2:method}, ${3:password}${4:, ${5:options}${6:, ${7:iv}${8:, ${9:tag}${10:, ${11:aad}}}}})
endsnippet

snippet openssl_dh_compute_key "Computes shared secret for public value of remote DH public key and local DH key" i
openssl_dh_compute_key(${1:pub_key}, ${2:dh_key})
endsnippet

snippet openssl_digest "Computes a digest" i
openssl_digest(${1:data}, ${2:method}${3:, ${4:raw_output}})
endsnippet

snippet openssl_encrypt "Encrypts data" i
openssl_encrypt(${1:data}, ${2:method}, ${3:password}${4:, ${5:options}${6:, ${7:iv}${8:, ${9:&tag}${10:, ${11:aad}${12:, ${13:tag_length}}}}}})
endsnippet

snippet openssl_error_string "Return openSSL error message" i
openssl_error_string()
endsnippet

snippet openssl_free_key "Free key resource" i
openssl_free_key(${1:key})
endsnippet

snippet openssl_get_cert_locations "Retrieve the available certificate locations" i
openssl_get_cert_locations()
endsnippet

snippet openssl_get_cipher_methods "Gets available cipher methods" i
openssl_get_cipher_methods(${1:aliases})
endsnippet

snippet openssl_get_curve_names "Gets list of available curve names for ECC" i
openssl_get_curve_names()
endsnippet

snippet openssl_get_md_methods "Gets available digest methods" i
openssl_get_md_methods(${1:aliases})
endsnippet

snippet openssl_get_privatekey "Alias of openssl_pkey_get_private()" i
openssl_get_privatekey(${1:key}${2:, ${3:passphrase}})
endsnippet

snippet openssl_get_publickey "Alias of openssl_pkey_get_public()" i
openssl_get_publickey(${1:cert})
endsnippet

snippet openssl_open "Open sealed data" i
openssl_open(${1:data}, ${2:&opendata}, ${3:ekey}, ${4:privkey}${5:, ${6:method}${7:, ${8:iv}}})
endsnippet

snippet openssl_pbkdf2 "Generates a PKCS5 v2 PBKDF2 string" i
openssl_pbkdf2(${1:password}, ${2:salt}, ${3:key_length}, ${4:iterations}${5:, ${6:digest_algorithm}})
endsnippet

snippet openssl_pkcs12_export "Exports a PKCS#12 Compatible Certificate Store File to variable" i
openssl_pkcs12_export(${1:x509}, ${2:&out}, ${3:priv_key}, ${4:pass}${5:, ${6:args}})
endsnippet

snippet openssl_pkcs12_export_to_file "Exports a PKCS#12 Compatible Certificate Store File" i
openssl_pkcs12_export_to_file(${1:x509}, ${2:filename}, ${3:priv_key}, ${4:pass}${5:, ${6:args}})
endsnippet

snippet openssl_pkcs12_read "Parse a PKCS#12 Certificate Store into an array" i
openssl_pkcs12_read(${1:PKCS12}, ${2:&certs}, ${3:pass})
endsnippet

snippet openssl_pkcs7_decrypt "Decrypts an S/MIME encrypted message" i
openssl_pkcs7_decrypt(${1:infilename}, ${2:outfilename}, ${3:recipcert}${4:, ${5:recipkey}})
endsnippet

snippet openssl_pkcs7_encrypt "Encrypt an S/MIME message" i
openssl_pkcs7_encrypt(${1:infile}, ${2:outfile}, ${3:recipcerts}, ${4:headers}${5:, ${6:flags}${7:, ${8:cipher}}})
endsnippet

snippet openssl_pkcs7_read "Export the PKCS7 file to an array of PEM certificates" i
openssl_pkcs7_read(${1:infilename}, ${2:&certs})
endsnippet

snippet openssl_pkcs7_sign "Sign an S/MIME message" i
openssl_pkcs7_sign(${1:infile}, ${2:outfile}, ${3:signcert}, ${4:signkey}, ${5:headers}${6:, ${7:flags}${8:, ${9:extracertsfilename}}})
endsnippet

snippet openssl_pkcs7_verify "Verifies the signature of an S/MIME signed message" i
openssl_pkcs7_verify(${1:filename}, ${2:flags}${3:, ${4:signerscerts}${5:, ${6:cainfo}${7:, ${8:extracerts}${9:, ${10:content}${11:, ${12:pk7}}}}}})
endsnippet

snippet openssl_pkey_derive "" i
openssl_pkey_derive(${1:peer_pub_key}, ${2:priv_key}${3:, ${4:keylen}})
endsnippet

snippet openssl_pkey_export "Gets an exportable representation of a key into a string" i
openssl_pkey_export(${1:key}, ${2:&out}${3:, ${4:passphrase}${5:, ${6:config_args}}})
endsnippet

snippet openssl_pkey_export_to_file "Gets an exportable representation of a key into a file" i
openssl_pkey_export_to_file(${1:key}, ${2:outfilename}${3:, ${4:passphrase}${5:, ${6:config_args}}})
endsnippet

snippet openssl_pkey_free "Frees a private key" i
openssl_pkey_free(${1:key})
endsnippet

snippet openssl_pkey_get_details "Returns an array with the key details" i
openssl_pkey_get_details(${1:key})
endsnippet

snippet openssl_pkey_get_private "Get a private key" i
openssl_pkey_get_private(${1:key}${2:, ${3:passphrase}})
endsnippet

snippet openssl_pkey_get_public "Extract public key from certificate and prepare it for use" i
openssl_pkey_get_public(${1:cert})
endsnippet

snippet openssl_pkey_new "Generates a new private key" i
openssl_pkey_new(${1:configargs})
endsnippet

snippet openssl_private_decrypt "Decrypts data with private key" i
openssl_private_decrypt(${1:data}, ${2:&crypted}, ${3:key}${4:, ${5:padding}})
endsnippet

snippet openssl_private_encrypt "Encrypts data with private key" i
openssl_private_encrypt(${1:data}, ${2:&crypted}, ${3:key}${4:, ${5:padding}})
endsnippet

snippet openssl_public_decrypt "Decrypts data with public key" i
openssl_public_decrypt(${1:data}, ${2:&crypted}, ${3:key}${4:, ${5:padding}})
endsnippet

snippet openssl_public_encrypt "Encrypts data with public key" i
openssl_public_encrypt(${1:data}, ${2:&crypted}, ${3:key}${4:, ${5:padding}})
endsnippet

snippet openssl_random_pseudo_bytes "Generate a pseudo-random string of bytes" i
openssl_random_pseudo_bytes(${1:length}${2:, ${3:&result_is_strong}})
endsnippet

snippet openssl_seal "Seal (encrypt) data" i
openssl_seal(${1:data}, ${2:&sealdata}, ${3:&ekeys}, ${4:pubkeys}${5:, ${6:method}${7:, ${8:&iv}}})
endsnippet

snippet openssl_sign "Generate signature" i
openssl_sign(${1:data}, ${2:&signature}, ${3:key}${4:, ${5:method}})
endsnippet

snippet openssl_spki_export "Exports a valid PEM formatted public key signed public key and challenge" i
openssl_spki_export(${1:spki})
endsnippet

snippet openssl_spki_export_challenge "Exports the challenge assoicated with a signed public key and challenge" i
openssl_spki_export_challenge(${1:spki})
endsnippet

snippet openssl_spki_new "Generate a new signed public key and challenge" i
openssl_spki_new(${1:privkey}, ${2:challenge}${3:, ${4:algo}})
endsnippet

snippet openssl_spki_verify "Verifies a signed public key and challenge" i
openssl_spki_verify(${1:spki})
endsnippet

snippet openssl_verify "Verify signature" i
openssl_verify(${1:data}, ${2:signature}, ${3:key}${4:, ${5:method}})
endsnippet

snippet openssl_x509_check_private_key "Checks if a private key corresponds to a certificate" i
openssl_x509_check_private_key(${1:cert}, ${2:key})
endsnippet

snippet openssl_x509_checkpurpose "Verifies if a certificate can be used for a particular purpose" i
openssl_x509_checkpurpose(${1:x509cert}, ${2:purpose}${3:, ${4:cainfo}${5:, ${6:untrustedfile}}})
endsnippet

snippet openssl_x509_export "Exports a certificate as a string" i
openssl_x509_export(${1:x509}, ${2:&out}${3:, ${4:notext}})
endsnippet

snippet openssl_x509_export_to_file "Exports a certificate to file" i
openssl_x509_export_to_file(${1:x509}, ${2:outfilename}${3:, ${4:notext}})
endsnippet

snippet openssl_x509_fingerprint "Calculates the fingerprint, or digest, of a given X.509 certificate" i
openssl_x509_fingerprint(${1:x509}${2:, ${3:method}${4:, ${5:raw_output}}})
endsnippet

snippet openssl_x509_free "Free certificate resource" i
openssl_x509_free(${1:x509})
endsnippet

snippet openssl_x509_parse "Parse an X509 certificate and return the information as an array" i
openssl_x509_parse(${1:x509}${2:, ${3:shortname}})
endsnippet

snippet openssl_x509_read "Parse an X.509 certificate and return a resource identifier for it" i
openssl_x509_read(${1:cert})
endsnippet

snippet ord "Convert the first byte of a string to a value between 0 and 255" i
ord(${1:character})
endsnippet

snippet output_add_rewrite_var "Add URL rewriter values" i
output_add_rewrite_var(${1:name}, ${2:value})
endsnippet

snippet output_reset_rewrite_vars "Reset URL rewriter values" i
output_reset_rewrite_vars()
endsnippet

snippet pack "Pack data into binary string" i
pack(${1:format}, ${2:args})
endsnippet

snippet parse_ini_file "Parse a configuration file" i
parse_ini_file(${1:filename}${2:, ${3:process_sections}${4:, ${5:scanner_mode}}})
endsnippet

snippet parse_ini_string "Parse a configuration string" i
parse_ini_string(${1:ini_string}${2:, ${3:process_sections}${4:, ${5:scanner_mode}}})
endsnippet

snippet parse_str "Parses the string into variables" i
parse_str(${1:encoded_string}${2:, ${3:&result}})
endsnippet

snippet parse_url "Parse a URL and return its components" i
parse_url(${1:url}${2:, ${3:component}})
endsnippet

snippet passthru "Execute an external program and display raw output" i
passthru(${1:command}${2:, ${3:&return_value}})
endsnippet

snippet password_get_info "Returns information about the given hash" i
password_get_info(${1:hash})
endsnippet

snippet password_hash "Creates a password hash" i
password_hash(${1:password}, ${2:algo}${3:, ${4:options}})
endsnippet

snippet password_needs_rehash "Checks if the given hash matches the given options" i
password_needs_rehash(${1:hash}, ${2:algo}${3:, ${4:options}})
endsnippet

snippet password_verify "Verifies that a password matches a hash" i
password_verify(${1:password}, ${2:hash})
endsnippet

snippet pathinfo "Returns information about a file path" i
pathinfo(${1:path}${2:, ${3:options}})
endsnippet

snippet pclose "Closes process file pointer" i
pclose(${1:fp})
endsnippet

snippet pcntl_alarm "Set an alarm clock for delivery of a signal" i
pcntl_alarm(${1:seconds})
endsnippet

snippet pcntl_async_signals "Enable/disable asynchronous signal handling or return the old setting" i
pcntl_async_signals(${1:on})
endsnippet

snippet pcntl_errno "Alias of pcntl_get_last_error()" i
pcntl_errno()
endsnippet

snippet pcntl_exec "Executes specified program in current process space" i
pcntl_exec(${1:path}${2:, ${3:args}${4:, ${5:envs}}})
endsnippet

snippet pcntl_fork "Forks the currently running process" i
pcntl_fork()
endsnippet

snippet pcntl_get_last_error "Retrieve the error number set by the last pcntl function which failed" i
pcntl_get_last_error()
endsnippet

snippet pcntl_getpriority "Get the priority of any process" i
pcntl_getpriority(${1:pid}${2:, ${3:process_identifier}})
endsnippet

snippet pcntl_setpriority "Change the priority of any process" i
pcntl_setpriority(${1:priority}${2:, ${3:pid}${4:, ${5:process_identifier}}})
endsnippet

snippet pcntl_signal "Installs a signal handler" i
pcntl_signal(${1:signo}, ${2:handler}${3:, ${4:restart_syscalls}})
endsnippet

snippet pcntl_signal_dispatch "Calls signal handlers for pending signals" i
pcntl_signal_dispatch()
endsnippet

snippet pcntl_signal_get_handler "Get the current handler for specified signal" i
pcntl_signal_get_handler(${1:signo})
endsnippet

snippet pcntl_sigprocmask "Sets and retrieves blocked signals" i
pcntl_sigprocmask(${1:how}, ${2:set}${3:, ${4:&oldset}})
endsnippet

snippet pcntl_sigtimedwait "Waits for signals, with a timeout" i
pcntl_sigtimedwait(${1:set}${2:, ${3:&info}${4:, ${5:seconds}${6:, ${7:nanoseconds}}}})
endsnippet

snippet pcntl_sigwaitinfo "Waits for signals" i
pcntl_sigwaitinfo(${1:set}${2:, ${3:&info}})
endsnippet

snippet pcntl_strerror "Retrieve the system error message associated with the given errno" i
pcntl_strerror(${1:errno})
endsnippet

snippet pcntl_wait "Waits on or returns the status of a forked child" i
pcntl_wait(${1:&status}${2:, ${3:options}${4:, ${5:&rusage}}})
endsnippet

snippet pcntl_waitpid "Waits on or returns the status of a forked child" i
pcntl_waitpid(${1:pid}, ${2:&status}${3:, ${4:options}${5:, ${6:&rusage}}})
endsnippet

snippet pcntl_wexitstatus "Returns the return code of a terminated child" i
pcntl_wexitstatus(${1:status})
endsnippet

snippet pcntl_wifcontinued "" i
pcntl_wifcontinued(${1:status})
endsnippet

snippet pcntl_wifexited "Checks if status code represents a normal exit" i
pcntl_wifexited(${1:status})
endsnippet

snippet pcntl_wifsignaled "Checks whether the status code represents a termination due to a signal" i
pcntl_wifsignaled(${1:status})
endsnippet

snippet pcntl_wifstopped "Checks whether the child process is currently stopped" i
pcntl_wifstopped(${1:status})
endsnippet

snippet pcntl_wstopsig "Returns the signal which caused the child to stop" i
pcntl_wstopsig(${1:status})
endsnippet

snippet pcntl_wtermsig "Returns the signal which caused the child to terminate" i
pcntl_wtermsig(${1:status})
endsnippet

snippet pdo_drivers "" i
pdo_drivers()
endsnippet

snippet pfsockopen "Open persistent Internet or Unix domain socket connection" i
pfsockopen(${1:hostname}${2:, ${3:port}${4:, ${5:&errno}${6:, ${7:&errstr}${8:, ${9:timeout}}}}})
endsnippet

snippet php_ini_loaded_file "Retrieve a path to the loaded php.ini file" i
php_ini_loaded_file()
endsnippet

snippet php_ini_scanned_files "Return a list of .ini files parsed from the additional ini dir" i
php_ini_scanned_files()
endsnippet

snippet php_sapi_name "Returns the type of interface between web server and PHP" i
php_sapi_name()
endsnippet

snippet php_strip_whitespace "Return source with stripped comments and whitespace" i
php_strip_whitespace(${1:file_name})
endsnippet

snippet php_uname "Returns information about the operating system PHP is running on" i
php_uname(${1:mode})
endsnippet

snippet phpcredits "Prints out the credits for PHP" i
phpcredits(${1:flag})
endsnippet

snippet phpinfo "Outputs information about PHP's configuration" i
phpinfo(${1:what})
endsnippet

snippet phpversion "Gets the current PHP version" i
phpversion(${1:extension})
endsnippet

snippet pi "Get value of pi" i
pi()
endsnippet

snippet popen "Opens process file pointer" i
popen(${1:command}, ${2:mode})
endsnippet

snippet pos "Alias of current()" i
pos(${1:arg})
endsnippet

snippet posix_access "Determine accessibility of a file" i
posix_access(${1:file}${2:, ${3:mode}})
endsnippet

snippet posix_ctermid "Get path name of controlling terminal" i
posix_ctermid()
endsnippet

snippet posix_errno "Alias of posix_get_last_error()" i
posix_errno()
endsnippet

snippet posix_get_last_error "Retrieve the error number set by the last posix function that failed" i
posix_get_last_error()
endsnippet

snippet posix_getcwd "Pathname of current directory" i
posix_getcwd()
endsnippet

snippet posix_getegid "Return the effective group ID of the current process" i
posix_getegid()
endsnippet

snippet posix_geteuid "Return the effective user ID of the current process" i
posix_geteuid()
endsnippet

snippet posix_getgid "Return the real group ID of the current process" i
posix_getgid()
endsnippet

snippet posix_getgrgid "Return info about a group by group id" i
posix_getgrgid(${1:gid})
endsnippet

snippet posix_getgrnam "Return info about a group by name" i
posix_getgrnam(${1:name})
endsnippet

snippet posix_getgroups "Return the group set of the current process" i
posix_getgroups()
endsnippet

snippet posix_getlogin "Return login name" i
posix_getlogin()
endsnippet

snippet posix_getpgid "Get process group id for job control" i
posix_getpgid(${1:pid})
endsnippet

snippet posix_getpgrp "Return the current process group identifier" i
posix_getpgrp()
endsnippet

snippet posix_getpid "Return the current process identifier" i
posix_getpid()
endsnippet

snippet posix_getppid "Return the parent process identifier" i
posix_getppid()
endsnippet

snippet posix_getpwnam "Return info about a user by username" i
posix_getpwnam(${1:username})
endsnippet

snippet posix_getpwuid "Return info about a user by user id" i
posix_getpwuid(${1:uid})
endsnippet

snippet posix_getrlimit "Return info about system resource limits" i
posix_getrlimit()
endsnippet

snippet posix_getsid "Get the current sid of the process" i
posix_getsid(${1:pid})
endsnippet

snippet posix_getuid "Return the real user ID of the current process" i
posix_getuid()
endsnippet

snippet posix_initgroups "Calculate the group access list" i
posix_initgroups(${1:name}, ${2:base_group_id})
endsnippet

snippet posix_isatty "Determine if a file descriptor is an interactive terminal" i
posix_isatty(${1:fd})
endsnippet

snippet posix_kill "Send a signal to a process" i
posix_kill(${1:pid}, ${2:sig})
endsnippet

snippet posix_mkfifo "Create a fifo special file (a named pipe)" i
posix_mkfifo(${1:pathname}, ${2:mode})
endsnippet

snippet posix_mknod "Create a special or ordinary file (POSIX.1)" i
posix_mknod(${1:pathname}, ${2:mode}${3:, ${4:major}${5:, ${6:minor}}})
endsnippet

snippet posix_setegid "Set the effective GID of the current process" i
posix_setegid(${1:gid})
endsnippet

snippet posix_seteuid "Set the effective UID of the current process" i
posix_seteuid(${1:uid})
endsnippet

snippet posix_setgid "Set the GID of the current process" i
posix_setgid(${1:gid})
endsnippet

snippet posix_setpgid "Set process group id for job control" i
posix_setpgid(${1:pid}, ${2:pgid})
endsnippet

snippet posix_setrlimit "Set system resource limits" i
posix_setrlimit(${1:resource}, ${2:softlimit}, ${3:hardlimit})
endsnippet

snippet posix_setsid "Make the current process a session leader" i
posix_setsid()
endsnippet

snippet posix_setuid "Set the UID of the current process" i
posix_setuid(${1:uid})
endsnippet

snippet posix_strerror "Retrieve the system error message associated with the given errno" i
posix_strerror(${1:errno})
endsnippet

snippet posix_times "Get process times" i
posix_times()
endsnippet

snippet posix_ttyname "Determine terminal device name" i
posix_ttyname(${1:fd})
endsnippet

snippet posix_uname "Get system name" i
posix_uname()
endsnippet

snippet pow "Exponential expression" i
pow(${1:base}, ${2:exponent})
endsnippet

snippet preg_filter "Perform a regular expression search and replace" i
preg_filter(${1:regex}, ${2:replace}, ${3:subject}${4:, ${5:limit}${6:, ${7:&count}}})
endsnippet

snippet preg_grep "Return array entries that match the pattern" i
preg_grep(${1:regex}, ${2:input}${3:, ${4:flags}})
endsnippet

snippet preg_last_error "Returns the error code of the last PCRE regex execution" i
preg_last_error()
endsnippet

snippet preg_match "Perform a regular expression match" i
preg_match(${1:pattern}, ${2:subject}${3:, ${4:&subpatterns}${5:, ${6:flags}${7:, ${8:offset}}}})
endsnippet

snippet preg_match_all "Perform a global regular expression match" i
preg_match_all(${1:pattern}, ${2:subject}${3:, ${4:&subpatterns}${5:, ${6:flags}${7:, ${8:offset}}}})
endsnippet

snippet preg_quote "Quote regular expression characters" i
preg_quote(${1:str}${2:, ${3:delim_char}})
endsnippet

snippet preg_replace "Perform a regular expression search and replace" i
preg_replace(${1:regex}, ${2:replace}, ${3:subject}${4:, ${5:limit}${6:, ${7:&count}}})
endsnippet

snippet preg_replace_callback "Perform a regular expression search and replace using a callback" i
preg_replace_callback(${1:regex}, ${2:callback}, ${3:subject}${4:, ${5:limit}${6:, ${7:&count}}})
endsnippet

snippet preg_replace_callback_array "Perform a regular expression search and replace using callbacks" i
preg_replace_callback_array(${1:pattern}, ${2:subject}${3:, ${4:limit}${5:, ${6:&count}}})
endsnippet

snippet preg_split "Split string by a regular expression" i
preg_split(${1:pattern}, ${2:subject}${3:, ${4:limit}${5:, ${6:flags}}})
endsnippet

snippet prev "Rewind the internal array pointer" i
prev(${1:&arg})
endsnippet

snippet print_r "Prints human-readable information about a variable" i
print_r(${1:var}${2:, ${3:return}})
endsnippet

snippet printf "Output a formatted string" i
printf(${1:format}${2:, ${3:args}})
endsnippet

snippet proc_close "Close a process opened by proc_open() and return the exit code of that process" i
proc_close(${1:process})
endsnippet

snippet proc_get_status "Get information about a process opened by proc_open()" i
proc_get_status(${1:process})
endsnippet

snippet proc_nice "Change the priority of the current process" i
proc_nice(${1:priority})
endsnippet

snippet proc_open "Execute a command and open file pointers for input/output" i
proc_open(${1:command}, ${2:descriptorspec}, ${3:&pipes}${4:, ${5:cwd}${6:, ${7:env}${8:, ${9:other_options}}}})
endsnippet

snippet proc_terminate "Kills a process opened by proc_open" i
proc_terminate(${1:process}${2:, ${3:signal}})
endsnippet

snippet property_exists "Checks if the object or class has a property" i
property_exists(${1:object_or_class}, ${2:property_name})
endsnippet

snippet putenv "Sets the value of an environment variable" i
putenv(${1:setting})
endsnippet

snippet quoted_printable_decode "Convert a quoted-printable string to an 8 bit string" i
quoted_printable_decode(${1:str})
endsnippet

snippet quoted_printable_encode "Convert a 8 bit string to a quoted-printable string" i
quoted_printable_encode(${1:str})
endsnippet

snippet quotemeta "Quote meta characters" i
quotemeta(${1:str})
endsnippet

snippet rad2deg "Converts the radian number to the equivalent number in degrees" i
rad2deg(${1:number})
endsnippet

snippet rand "Generate a random integer" i
rand(${1:min}${2:, ${3:max}})
endsnippet

snippet random_bytes "Generates cryptographically secure pseudo-random bytes" i
random_bytes(${1:length})
endsnippet

snippet random_int "Generates cryptographically secure pseudo-random integers" i
random_int(${1:min}, ${2:max})
endsnippet

snippet range "Create an array containing a range of elements" i
range(${1:low}, ${2:high}${3:, ${4:step}})
endsnippet

snippet rawurldecode "Decode URL-encoded strings" i
rawurldecode(${1:str})
endsnippet

snippet rawurlencode "URL-encode according to RFC 3986" i
rawurlencode(${1:str})
endsnippet

snippet readdir "Read entry from directory handle" i
readdir(${1:dir_handle})
endsnippet

snippet readfile "Outputs a file" i
readfile(${1:filename}${2:, ${3:flags}${4:, ${5:context}}})
endsnippet

snippet readgzfile "Output a gz-file" i
readgzfile(${1:filename}${2:, ${3:use_include_path}})
endsnippet

snippet readline "Reads a line" i
readline(${1:prompt})
endsnippet

snippet readline_add_history "Adds a line to the history" i
readline_add_history(${1:prompt})
endsnippet

snippet readline_callback_handler_install "Initializes the readline callback interface and terminal, prints the prompt and returns immediately" i
readline_callback_handler_install(${1:prompt}, ${2:callback})
endsnippet

snippet readline_callback_handler_remove "Removes a previously installed callback handler and restores terminal settings" i
readline_callback_handler_remove()
endsnippet

snippet readline_callback_read_char "Reads a character and informs the readline callback interface when a line is received" i
readline_callback_read_char()
endsnippet

snippet readline_clear_history "Clears the history" i
readline_clear_history()
endsnippet

snippet readline_completion_function "Registers a completion function" i
readline_completion_function(${1:funcname})
endsnippet

snippet readline_info "Gets/sets various internal readline variables" i
readline_info(${1:varname}${2:, ${3:newvalue}})
endsnippet

snippet readline_list_history "Lists the history" i
readline_list_history()
endsnippet

snippet readline_on_new_line "Inform readline that the cursor has moved to a new line" i
readline_on_new_line()
endsnippet

snippet readline_read_history "Reads the history" i
readline_read_history(${1:filename})
endsnippet

snippet readline_redisplay "Redraws the display" i
readline_redisplay()
endsnippet

snippet readline_write_history "Writes the history" i
readline_write_history(${1:filename})
endsnippet

snippet readlink "Returns the target of a symbolic link" i
readlink(${1:filename})
endsnippet

snippet realpath "Returns canonicalized absolute pathname" i
realpath(${1:path})
endsnippet

snippet realpath_cache_get "Get realpath cache entries" i
realpath_cache_get()
endsnippet

snippet realpath_cache_size "Get realpath cache size" i
realpath_cache_size()
endsnippet

snippet register_shutdown_function "Register a function for execution on shutdown" i
register_shutdown_function(${1:function_name}${2:, ${3:parameters}})
endsnippet

snippet register_tick_function "Register a function for execution on each tick" i
register_tick_function(${1:function_name}${2:, ${3:parameters}})
endsnippet

snippet rename "Renames a file or directory" i
rename(${1:old_name}, ${2:new_name}${3:, ${4:context}})
endsnippet

snippet reset "Set the internal pointer of an array to its first element" i
reset(${1:&arg})
endsnippet

snippet resourcebundle_count "Get number of elements in the bundle" i
resourcebundle_count(${1:bundle})
endsnippet

snippet resourcebundle_create "Create a resource bundle" i
resourcebundle_create(${1:locale}, ${2:bundlename}${3:, ${4:fallback}})
endsnippet

snippet resourcebundle_get "Get data from the bundle" i
resourcebundle_get(${1:bundle}, ${2:index}${3:, ${4:fallback}})
endsnippet

snippet resourcebundle_get_error_code "" i
resourcebundle_get_error_code(${1:bundle})
endsnippet

snippet resourcebundle_get_error_message "" i
resourcebundle_get_error_message(${1:bundle})
endsnippet

snippet resourcebundle_locales "Get supported locales" i
resourcebundle_locales(${1:bundlename})
endsnippet

snippet restore_error_handler "Restores the previous error handler function" i
restore_error_handler()
endsnippet

snippet restore_exception_handler "Restores the previously defined exception handler function" i
restore_exception_handler()
endsnippet

snippet restore_include_path "Restores the value of the include_path configuration option" i
restore_include_path()
endsnippet

snippet rewind "Rewind the position of a file pointer" i
rewind(${1:fp})
endsnippet

snippet rewinddir "Rewind directory handle" i
rewinddir(${1:dir_handle})
endsnippet

snippet rmdir "Removes directory" i
rmdir(${1:dirname}${2:, ${3:context}})
endsnippet

snippet round "Rounds a float" i
round(${1:number}${2:, ${3:precision}${4:, ${5:mode}}})
endsnippet

snippet rsort "Sort an array in reverse order" i
rsort(${1:&arg}${2:, ${3:sort_flags}})
endsnippet

snippet rtrim "Strip whitespace (or other characters) from the end of a string" i
rtrim(${1:str}${2:, ${3:character_mask}})
endsnippet

snippet scandir "List files and directories inside the specified path" i
scandir(${1:dir}${2:, ${3:sorting_order}${4:, ${5:context}}})
endsnippet

snippet sem_acquire "Acquire a semaphore" i
sem_acquire(${1:sem_identifier}${2:, ${3:nowait}})
endsnippet

snippet sem_get "Get a semaphore id" i
sem_get(${1:key}${2:, ${3:max_acquire}${4:, ${5:perm}${6:, ${7:auto_release}}}})
endsnippet

snippet sem_release "Release a semaphore" i
sem_release(${1:sem_identifier})
endsnippet

snippet sem_remove "Remove a semaphore" i
sem_remove(${1:sem_identifier})
endsnippet

snippet serialize "Generates a storable representation of a value" i
serialize(${1:var})
endsnippet

snippet session_abort "Discard session array changes and finish session" i
session_abort()
endsnippet

snippet session_cache_expire "Return current cache expire" i
session_cache_expire(${1:new_cache_expire})
endsnippet

snippet session_cache_limiter "Get and/or set the current cache limiter" i
session_cache_limiter(${1:cache_limiter})
endsnippet

snippet session_commit "Alias of session_write_close()" i
session_commit()
endsnippet

snippet session_create_id "Create new session id" i
session_create_id(${1:prefix})
endsnippet

snippet session_decode "Decodes session data from a session encoded string" i
session_decode(${1:data})
endsnippet

snippet session_destroy "Destroys all data registered to a session" i
session_destroy()
endsnippet

snippet session_encode "Encodes the current session data as a session encoded string" i
session_encode()
endsnippet

snippet session_gc "Perform session data garbage collection" i
session_gc()
endsnippet

snippet session_get_cookie_params "Get the session cookie parameters" i
session_get_cookie_params()
endsnippet

snippet session_id "Get and/or set the current session id" i
session_id(${1:id})
endsnippet

snippet session_module_name "Get and/or set the current session module" i
session_module_name(${1:module})
endsnippet

snippet session_name "Get and/or set the current session name" i
session_name(${1:name})
endsnippet

snippet session_regenerate_id "Update the current session id with a newly generated one" i
session_regenerate_id(${1:delete_old_session})
endsnippet

snippet session_register_shutdown "Session shutdown function" i
session_register_shutdown()
endsnippet

snippet session_reset "Re-initialize session array with original values" i
session_reset()
endsnippet

snippet session_save_path "Get and/or set the current session save path" i
session_save_path(${1:path})
endsnippet

snippet session_set_cookie_params "Set the session cookie parameters" i
session_set_cookie_params(${1:lifetime_or_options}${2:, ${3:path}${4:, ${5:domain}${6:, ${7:secure}${8:, ${9:httponly}}}}})
endsnippet

snippet session_set_save_handler "Sets user-level session storage functions" i
session_set_save_handler(${1:open}${2:, ${3:close}${4:, ${5:read}${6:, ${7:write}${8:, ${9:destroy}${10:, ${11:gc}${12:, ${13:create_sid}${14:, ${15:validate_sid}${16:, ${17:update_timestamp}}}}}}}}})
endsnippet

snippet session_start "Start new or resume existing session" i
session_start(${1:options})
endsnippet

snippet session_status "Returns the current session status" i
session_status()
endsnippet

snippet session_unset "Free all session variables" i
session_unset()
endsnippet

snippet session_write_close "Write session data and end session" i
session_write_close()
endsnippet

snippet set_error_handler "Sets a user-defined error handler function" i
set_error_handler(${1:error_handler}${2:, ${3:error_types}})
endsnippet

snippet set_exception_handler "Sets a user-defined exception handler function" i
set_exception_handler(${1:exception_handler})
endsnippet

snippet set_file_buffer "Alias of stream_set_write_buffer()" i
set_file_buffer(${1:fp}, ${2:buffer})
endsnippet

snippet set_include_path "Sets the include_path configuration option" i
set_include_path(${1:new_include_path})
endsnippet

snippet set_time_limit "Limits the maximum execution time" i
set_time_limit(${1:seconds})
endsnippet

snippet setcookie "Send a cookie" i
setcookie(${1:name}${2:, ${3:value}${4:, ${5:expires_or_options}${6:, ${7:path}${8:, ${9:domain}${10:, ${11:secure}${12:, ${13:httponly}}}}}}})
endsnippet

snippet setlocale "Set locale information" i
setlocale(${1:category}, ${2:locales})
endsnippet

snippet setrawcookie "Send a cookie without urlencoding the cookie value" i
setrawcookie(${1:name}${2:, ${3:value}${4:, ${5:expires_or_options}${6:, ${7:path}${8:, ${9:domain}${10:, ${11:secure}${12:, ${13:httponly}}}}}}})
endsnippet

snippet settype "Set the type of a variable" i
settype(${1:&var}, ${2:type})
endsnippet

snippet sha1 "Calculate the sha1 hash of a string" i
sha1(${1:str}${2:, ${3:raw_output}})
endsnippet

snippet sha1_file "Calculate the sha1 hash of a file" i
sha1_file(${1:filename}${2:, ${3:raw_output}})
endsnippet

snippet shell_exec "Execute command via shell and return the complete output as a string" i
shell_exec(${1:cmd})
endsnippet

snippet shm_attach "Creates or open a shared memory segment" i
shm_attach(${1:key}${2:, ${3:memsize}${4:, ${5:perm}}})
endsnippet

snippet shm_detach "Disconnects from shared memory segment" i
shm_detach(${1:shm_identifier})
endsnippet

snippet shm_get_var "Returns a variable from shared memory" i
shm_get_var(${1:id}, ${2:variable_key})
endsnippet

snippet shm_has_var "Check whether a specific entry exists" i
shm_has_var(${1:id}, ${2:variable_key})
endsnippet

snippet shm_put_var "Inserts or updates a variable in shared memory" i
shm_put_var(${1:shm_identifier}, ${2:variable_key}, ${3:variable})
endsnippet

snippet shm_remove "Removes shared memory from Unix systems" i
shm_remove(${1:shm_identifier})
endsnippet

snippet shm_remove_var "Removes a variable from shared memory" i
shm_remove_var(${1:id}, ${2:variable_key})
endsnippet

snippet shmop_close "Close shared memory block" i
shmop_close(${1:shmid})
endsnippet

snippet shmop_delete "Delete shared memory block" i
shmop_delete(${1:shmid})
endsnippet

snippet shmop_open "Create or open shared memory block" i
shmop_open(${1:key}, ${2:flags}, ${3:mode}, ${4:size})
endsnippet

snippet shmop_read "Read data from shared memory block" i
shmop_read(${1:shmid}, ${2:start}, ${3:count})
endsnippet

snippet shmop_size "Get size of shared memory block" i
shmop_size(${1:shmid})
endsnippet

snippet shmop_write "Write data into shared memory block" i
shmop_write(${1:shmid}, ${2:data}, ${3:offset})
endsnippet

snippet show_source "Alias of highlight_file()" i
show_source(${1:file_name}${2:, ${3:return}})
endsnippet

snippet shuffle "Shuffle an array" i
shuffle(${1:&arg})
endsnippet

snippet similar_text "Calculate the similarity between two strings" i
similar_text(${1:str1}, ${2:str2}${3:, ${4:&percent}})
endsnippet

snippet simplexml_import_dom "Get a SimpleXMLElement object from a DOM node" i
simplexml_import_dom(${1:node}${2:, ${3:class_name}})
endsnippet

snippet simplexml_load_file "Interprets an XML file into an object" i
simplexml_load_file(${1:filename}${2:, ${3:class_name}${4:, ${5:options}${6:, ${7:ns}${8:, ${9:is_prefix}}}}})
endsnippet

snippet simplexml_load_string "Interprets a string of XML into an object" i
simplexml_load_string(${1:data}${2:, ${3:class_name}${4:, ${5:options}${6:, ${7:ns}${8:, ${9:is_prefix}}}}})
endsnippet

snippet sin "Sine" i
sin(${1:number})
endsnippet

snippet sinh "Hyperbolic sine" i
sinh(${1:number})
endsnippet

snippet sizeof "Alias of count()" i
sizeof(${1:var}${2:, ${3:mode}})
endsnippet

snippet sleep "Delay execution" i
sleep(${1:seconds})
endsnippet

snippet socket_accept "Accepts a connection on a socket" i
socket_accept(${1:socket})
endsnippet

snippet socket_addrinfo_bind "Create and bind to a socket from a given addrinfo" i
socket_addrinfo_bind(${1:addr})
endsnippet

snippet socket_addrinfo_connect "Create and connect to a socket from a given addrinfo" i
socket_addrinfo_connect(${1:addr})
endsnippet

snippet socket_addrinfo_explain "Get information about addrinfo" i
socket_addrinfo_explain(${1:addr})
endsnippet

snippet socket_addrinfo_lookup "Get array with contents of getaddrinfo about the given hostname" i
socket_addrinfo_lookup(${1:host}${2:, ${3:service}${4:, ${5:hints}}})
endsnippet

snippet socket_bind "Binds a name to a socket" i
socket_bind(${1:socket}, ${2:addr}${3:, ${4:port}})
endsnippet

snippet socket_clear_error "Clears the error on the socket or the last error code" i
socket_clear_error(${1:socket})
endsnippet

snippet socket_close "Closes a socket resource" i
socket_close(${1:socket})
endsnippet

snippet socket_cmsg_space "Calculate message buffer size" i
socket_cmsg_space(${1:level}, ${2:type})
endsnippet

snippet socket_connect "Initiates a connection on a socket" i
socket_connect(${1:socket}, ${2:addr}${3:, ${4:port}})
endsnippet

snippet socket_create "Create a socket (endpoint for communication)" i
socket_create(${1:domain}, ${2:type}, ${3:protocol})
endsnippet

snippet socket_create_listen "Opens a socket on port to accept connections" i
socket_create_listen(${1:port}${2:, ${3:backlog}})
endsnippet

snippet socket_create_pair "Creates a pair of indistinguishable sockets and stores them in an array" i
socket_create_pair(${1:domain}, ${2:type}, ${3:protocol}, ${4:&fd})
endsnippet

snippet socket_export_stream "Export a socket extension resource into a stream that encapsulates a socket" i
socket_export_stream(${1:socket})
endsnippet

snippet socket_get_option "Gets socket options for the socket" i
socket_get_option(${1:socket}, ${2:level}, ${3:optname})
endsnippet

snippet socket_get_status "Alias of stream_get_meta_data()" i
socket_get_status(${1:fp})
endsnippet

snippet socket_getopt "Alias of socket_get_option()" i
socket_getopt(${1:socket}, ${2:level}, ${3:optname})
endsnippet

snippet socket_getpeername "Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type" i
socket_getpeername(${1:socket}, ${2:&addr}${3:, ${4:&port}})
endsnippet

snippet socket_getsockname "Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type" i
socket_getsockname(${1:socket}, ${2:&addr}${3:, ${4:&port}})
endsnippet

snippet socket_import_stream "Import a stream" i
socket_import_stream(${1:stream})
endsnippet

snippet socket_last_error "Returns the last error on the socket" i
socket_last_error(${1:socket})
endsnippet

snippet socket_listen "Listens for a connection on a socket" i
socket_listen(${1:socket}${2:, ${3:backlog}})
endsnippet

snippet socket_read "Reads a maximum of length bytes from a socket" i
socket_read(${1:socket}, ${2:length}${3:, ${4:type}})
endsnippet

snippet socket_recv "Receives data from a connected socket" i
socket_recv(${1:socket}, ${2:&buf}, ${3:len}, ${4:flags})
endsnippet

snippet socket_recvfrom "Receives data from a socket whether or not it is connection-oriented" i
socket_recvfrom(${1:socket}, ${2:&buf}, ${3:len}, ${4:flags}, ${5:&name}${6:, ${7:&port}})
endsnippet

snippet socket_recvmsg "Read a message" i
socket_recvmsg(${1:socket}, ${2:&msghdr}, ${3:flags})
endsnippet

snippet socket_select "Runs the select() system call on the given arrays of sockets with a specified timeout" i
socket_select(${1:&read_fds}, ${2:&write_fds}, ${3:&except_fds}, ${4:tv_sec}${5:, ${6:tv_usec}})
endsnippet

snippet socket_send "Sends data to a connected socket" i
socket_send(${1:socket}, ${2:buf}, ${3:len}, ${4:flags})
endsnippet

snippet socket_sendmsg "Send a message" i
socket_sendmsg(${1:socket}, ${2:msghdr}, ${3:flags})
endsnippet

snippet socket_sendto "Sends a message to a socket, whether it is connected or not" i
socket_sendto(${1:socket}, ${2:buf}, ${3:len}, ${4:flags}, ${5:addr}${6:, ${7:port}})
endsnippet

snippet socket_set_block "Sets blocking mode on a socket resource" i
socket_set_block(${1:socket})
endsnippet

snippet socket_set_blocking "Alias of stream_set_blocking()" i
socket_set_blocking(${1:socket}, ${2:mode})
endsnippet

snippet socket_set_nonblock "Sets nonblocking mode for file descriptor fd" i
socket_set_nonblock(${1:socket})
endsnippet

snippet socket_set_option "Sets socket options for the socket" i
socket_set_option(${1:socket}, ${2:level}, ${3:optname}, ${4:optval})
endsnippet

snippet socket_set_timeout "Alias of stream_set_timeout()" i
socket_set_timeout(${1:stream}, ${2:seconds}${3:, ${4:microseconds}})
endsnippet

snippet socket_setopt "Alias of socket_set_option()" i
socket_setopt(${1:socket}, ${2:level}, ${3:optname}, ${4:optval})
endsnippet

snippet socket_shutdown "Shuts down a socket for receiving, sending, or both" i
socket_shutdown(${1:socket}${2:, ${3:how}})
endsnippet

snippet socket_strerror "Return a string describing a socket error" i
socket_strerror(${1:errno})
endsnippet

snippet socket_write "Write to a socket" i
socket_write(${1:socket}, ${2:buf}${3:, ${4:length}})
endsnippet

snippet sort "Sort an array" i
sort(${1:&arg}${2:, ${3:sort_flags}})
endsnippet

snippet soundex "Calculate the soundex key of a string" i
soundex(${1:str})
endsnippet

snippet spl_autoload "Default implementation for __autoload()" i
spl_autoload(${1:class_name}${2:, ${3:file_extensions}})
endsnippet

snippet spl_autoload_call "Try all registered __autoload() functions to load the requested class" i
spl_autoload_call(${1:class_name})
endsnippet

snippet spl_autoload_extensions "Register and return default file extensions for spl_autoload" i
spl_autoload_extensions(${1:file_extensions})
endsnippet

snippet spl_autoload_functions "Return all registered __autoload() functions" i
spl_autoload_functions()
endsnippet

snippet spl_autoload_register "Register given function as __autoload() implementation" i
spl_autoload_register(${1:autoload_function}${2:, ${3:throw}${4:, ${5:prepend}}})
endsnippet

snippet spl_autoload_unregister "Unregister given function as __autoload() implementation" i
spl_autoload_unregister(${1:autoload_function})
endsnippet

snippet spl_classes "Return available SPL classes" i
spl_classes()
endsnippet

snippet spl_object_hash "Return hash id for given object" i
spl_object_hash(${1:obj})
endsnippet

snippet spl_object_id "Return the integer object handle for given object" i
spl_object_id(${1:obj})
endsnippet

snippet sprintf "Return a formatted string" i
sprintf(${1:format}${2:, ${3:args}})
endsnippet

snippet sqrt "Square root" i
sqrt(${1:number})
endsnippet

snippet srand "Seed the random number generator" i
srand(${1:seed}${2:, ${3:mode}})
endsnippet

snippet sscanf "Parses input from a string according to a format" i
sscanf(${1:str}, ${2:format}${3:, ${4:&vars}})
endsnippet

snippet stat "Gives information about a file" i
stat(${1:filename})
endsnippet

snippet str_getcsv "Parse a CSV string into an array" i
str_getcsv(${1:string}${2:, ${3:delimiter}${4:, ${5:enclosure}${6:, ${7:escape}}}})
endsnippet

snippet str_ireplace "Case-insensitive version of str_replace()" i
str_ireplace(${1:search}, ${2:replace}, ${3:subject}${4:, ${5:&replace_count}})
endsnippet

snippet str_pad "Pad a string to a certain length with another string" i
str_pad(${1:input}, ${2:pad_length}${3:, ${4:pad_string}${5:, ${6:pad_type}}})
endsnippet

snippet str_repeat "Repeat a string" i
str_repeat(${1:input}, ${2:mult})
endsnippet

snippet str_replace "Replace all occurrences of the search string with the replacement string" i
str_replace(${1:search}, ${2:replace}, ${3:subject}${4:, ${5:&replace_count}})
endsnippet

snippet str_rot13 "Perform the rot13 transform on a string" i
str_rot13(${1:str})
endsnippet

snippet str_shuffle "Randomly shuffles a string" i
str_shuffle(${1:str})
endsnippet

snippet str_split "Convert a string to an array" i
str_split(${1:str}${2:, ${3:split_length}})
endsnippet

snippet str_word_count "Return information about words used in a string" i
str_word_count(${1:str}${2:, ${3:format}${4:, ${5:charlist}}})
endsnippet

snippet strcasecmp "Binary safe case-insensitive string comparison" i
strcasecmp(${1:str1}, ${2:str2})
endsnippet

snippet strchr "Alias of strstr()" i
strchr(${1:haystack}, ${2:needle}${3:, ${4:part}})
endsnippet

snippet strcmp "Binary safe string comparison" i
strcmp(${1:str1}, ${2:str2})
endsnippet

snippet strcoll "Locale based string comparison" i
strcoll(${1:str1}, ${2:str2})
endsnippet

snippet strcspn "Find length of initial segment not matching mask" i
strcspn(${1:str}, ${2:mask}${3:, ${4:start}${5:, ${6:len}}})
endsnippet

snippet stream_bucket_append "Append bucket to brigade" i
stream_bucket_append(${1:brigade}, ${2:bucket})
endsnippet

snippet stream_bucket_make_writeable "Return a bucket object from the brigade for operating on" i
stream_bucket_make_writeable(${1:brigade})
endsnippet

snippet stream_bucket_new "Create a new bucket for use on the current stream" i
stream_bucket_new(${1:stream}, ${2:buffer})
endsnippet

snippet stream_bucket_prepend "Prepend bucket to brigade" i
stream_bucket_prepend(${1:brigade}, ${2:bucket})
endsnippet

snippet stream_context_create "Creates a stream context" i
stream_context_create(${1:options}${2:, ${3:params}})
endsnippet

snippet stream_context_get_default "Retrieve the default stream context" i
stream_context_get_default(${1:options})
endsnippet

snippet stream_context_get_options "Retrieve options for a stream/wrapper/context" i
stream_context_get_options(${1:stream_or_context})
endsnippet

snippet stream_context_get_params "Retrieves parameters from a context" i
stream_context_get_params(${1:stream_or_context})
endsnippet

snippet stream_context_set_default "Set the default stream context" i
stream_context_set_default(${1:options})
endsnippet

snippet stream_context_set_option "Sets an option for a stream/wrapper/context" i
stream_context_set_option(${1:stream_or_context}, ${2:wrappername}, ${3:optionname}, ${4:value})
endsnippet

snippet stream_context_set_params "Set parameters for a stream/wrapper/context" i
stream_context_set_params(${1:stream_or_context}, ${2:options})
endsnippet

snippet stream_copy_to_stream "Copies data from one stream to another" i
stream_copy_to_stream(${1:source}, ${2:dest}${3:, ${4:maxlen}${5:, ${6:pos}}})
endsnippet

snippet stream_filter_append "Attach a filter to a stream" i
stream_filter_append(${1:stream}, ${2:filtername}${3:, ${4:read_write}${5:, ${6:filterparams}}})
endsnippet

snippet stream_filter_prepend "Attach a filter to a stream" i
stream_filter_prepend(${1:stream}, ${2:filtername}${3:, ${4:read_write}${5:, ${6:filterparams}}})
endsnippet

snippet stream_filter_register "Register a user defined stream filter" i
stream_filter_register(${1:filtername}, ${2:classname})
endsnippet

snippet stream_filter_remove "Remove a filter from a stream" i
stream_filter_remove(${1:stream_filter})
endsnippet

snippet stream_get_contents "Reads remainder of a stream into a string" i
stream_get_contents(${1:source}${2:, ${3:maxlen}${4:, ${5:offset}}})
endsnippet

snippet stream_get_filters "Retrieve list of registered filters" i
stream_get_filters()
endsnippet

snippet stream_get_line "Gets line from stream resource up to a given delimiter" i
stream_get_line(${1:stream}, ${2:maxlen}${3:, ${4:ending}})
endsnippet

snippet stream_get_meta_data "Retrieves header/meta data from streams/file pointers" i
stream_get_meta_data(${1:fp})
endsnippet

snippet stream_get_transports "Retrieve list of registered socket transports" i
stream_get_transports()
endsnippet

snippet stream_get_wrappers "Retrieve list of registered streams" i
stream_get_wrappers()
endsnippet

snippet stream_is_local "Checks if a stream is a local stream" i
stream_is_local(${1:stream})
endsnippet

snippet stream_isatty "Check if a stream is a TTY" i
stream_isatty(${1:stream})
endsnippet

snippet stream_register_wrapper "Alias of stream_wrapper_register()" i
stream_register_wrapper(${1:protocol}, ${2:classname}${3:, ${4:flags}})
endsnippet

snippet stream_resolve_include_path "Resolve filename against the include path" i
stream_resolve_include_path(${1:filename})
endsnippet

snippet stream_select "Runs the equivalent of the select() system call on the given arrays of streams with a timeout specified by tv_sec and tv_usec" i
stream_select(${1:&read_streams}, ${2:&write_streams}, ${3:&except_streams}, ${4:tv_sec}${5:, ${6:tv_usec}})
endsnippet

snippet stream_set_blocking "Set blocking/non-blocking mode on a stream" i
stream_set_blocking(${1:socket}, ${2:mode})
endsnippet

snippet stream_set_chunk_size "Set the stream chunk size" i
stream_set_chunk_size(${1:fp}, ${2:chunk_size})
endsnippet

snippet stream_set_read_buffer "Set read file buffering on the given stream" i
stream_set_read_buffer(${1:fp}, ${2:buffer})
endsnippet

snippet stream_set_timeout "Set timeout period on a stream" i
stream_set_timeout(${1:stream}, ${2:seconds}${3:, ${4:microseconds}})
endsnippet

snippet stream_set_write_buffer "Sets write file buffering on the given stream" i
stream_set_write_buffer(${1:fp}, ${2:buffer})
endsnippet

snippet stream_socket_accept "Accept a connection on a socket created by stream_socket_server()" i
stream_socket_accept(${1:serverstream}${2:, ${3:timeout}${4:, ${5:&peername}}})
endsnippet

snippet stream_socket_client "Open Internet or Unix domain socket connection" i
stream_socket_client(${1:remoteaddress}${2:, ${3:&errcode}${4:, ${5:&errstring}${6:, ${7:timeout}${8:, ${9:flags}${10:, ${11:context}}}}}})
endsnippet

snippet stream_socket_enable_crypto "Turns encryption on/off on an already connected socket" i
stream_socket_enable_crypto(${1:stream}, ${2:enable}${3:, ${4:cryptokind}${5:, ${6:sessionstream}}})
endsnippet

snippet stream_socket_get_name "Retrieve the name of the local or remote sockets" i
stream_socket_get_name(${1:stream}, ${2:want_peer})
endsnippet

snippet stream_socket_pair "Creates a pair of connected, indistinguishable socket streams" i
stream_socket_pair(${1:domain}, ${2:type}, ${3:protocol})
endsnippet

snippet stream_socket_recvfrom "Receives data from a socket, connected or not" i
stream_socket_recvfrom(${1:stream}, ${2:amount}${3:, ${4:flags}${5:, ${6:&remote_addr}}})
endsnippet

snippet stream_socket_sendto "Sends a message to a socket, whether it is connected or not" i
stream_socket_sendto(${1:stream}, ${2:data}${3:, ${4:flags}${5:, ${6:target_addr}}})
endsnippet

snippet stream_socket_server "Create an Internet or Unix domain server socket" i
stream_socket_server(${1:localaddress}${2:, ${3:&errcode}${4:, ${5:&errstring}${6:, ${7:flags}${8:, ${9:context}}}}})
endsnippet

snippet stream_socket_shutdown "Shutdown a full-duplex connection" i
stream_socket_shutdown(${1:stream}, ${2:how})
endsnippet

snippet stream_supports_lock "Tells whether the stream supports locking" i
stream_supports_lock(${1:stream})
endsnippet

snippet stream_wrapper_register "Register a URL wrapper implemented as a PHP class" i
stream_wrapper_register(${1:protocol}, ${2:classname}${3:, ${4:flags}})
endsnippet

snippet stream_wrapper_restore "Restores a previously unregistered built-in wrapper" i
stream_wrapper_restore(${1:protocol})
endsnippet

snippet stream_wrapper_unregister "Unregister a URL wrapper" i
stream_wrapper_unregister(${1:protocol})
endsnippet

snippet strftime "Format a local time/date according to locale settings" i
strftime(${1:format}${2:, ${3:timestamp}})
endsnippet

snippet strip_tags "Strip HTML and PHP tags from a string" i
strip_tags(${1:str}${2:, ${3:allowable_tags}})
endsnippet

snippet stripcslashes "Un-quote string quoted with addcslashes()" i
stripcslashes(${1:str})
endsnippet

snippet stripos "Find the position of the first occurrence of a case-insensitive substring in a string" i
stripos(${1:haystack}, ${2:needle}${3:, ${4:offset}})
endsnippet

snippet stripslashes "Un-quotes a quoted string" i
stripslashes(${1:str})
endsnippet

snippet stristr "Case-insensitive strstr()" i
stristr(${1:haystack}, ${2:needle}${3:, ${4:part}})
endsnippet

snippet strlen "Get string length" i
strlen(${1:str})
endsnippet

snippet strnatcasecmp "Case insensitive string comparisons using a natural order algorithm" i
strnatcasecmp(${1:s1}, ${2:s2})
endsnippet

snippet strnatcmp "String comparisons using a natural order algorithm" i
strnatcmp(${1:s1}, ${2:s2})
endsnippet

snippet strncasecmp "Binary safe case-insensitive string comparison of the first n characters" i
strncasecmp(${1:str1}, ${2:str2}, ${3:len})
endsnippet

snippet strncmp "Binary safe string comparison of the first n characters" i
strncmp(${1:str1}, ${2:str2}, ${3:len})
endsnippet

snippet strpbrk "Search a string for any of a set of characters" i
strpbrk(${1:haystack}, ${2:char_list})
endsnippet

snippet strpos "Find the position of the first occurrence of a substring in a string" i
strpos(${1:haystack}, ${2:needle}${3:, ${4:offset}})
endsnippet

snippet strptime "Parse a time/date generated with strftime()" i
strptime(${1:timestamp}, ${2:format})
endsnippet

snippet strrchr "Find the last occurrence of a character in a string" i
strrchr(${1:haystack}, ${2:needle})
endsnippet

snippet strrev "Reverse a string" i
strrev(${1:str})
endsnippet

snippet strripos "Find the position of the last occurrence of a case-insensitive substring in a string" i
strripos(${1:haystack}, ${2:needle}${3:, ${4:offset}})
endsnippet

snippet strrpos "Find the position of the last occurrence of a substring in a string" i
strrpos(${1:haystack}, ${2:needle}${3:, ${4:offset}})
endsnippet

snippet strspn "Finds the length of the initial segment of a string consisting entirely of characters contained within a given mask" i
strspn(${1:str}, ${2:mask}${3:, ${4:start}${5:, ${6:len}}})
endsnippet

snippet strstr "Find the first occurrence of a string" i
strstr(${1:haystack}, ${2:needle}${3:, ${4:part}})
endsnippet

snippet strtok "Tokenize string" i
strtok(${1:str}${2:, ${3:token}})
endsnippet

snippet strtolower "Make a string lowercase" i
strtolower(${1:str})
endsnippet

snippet strtotime "Parse about any English textual datetime description into a Unix timestamp" i
strtotime(${1:time}${2:, ${3:now}})
endsnippet

snippet strtoupper "Make a string uppercase" i
strtoupper(${1:str})
endsnippet

snippet strtr "Translate characters or replace substrings" i
strtr(${1:str}, ${2:from}${3:, ${4:to}})
endsnippet

snippet strval "Get string value of a variable" i
strval(${1:var})
endsnippet

snippet substr "Return part of a string" i
substr(${1:str}, ${2:start}${3:, ${4:length}})
endsnippet

snippet substr_compare "Binary safe comparison of two strings from an offset, up to length characters" i
substr_compare(${1:main_str}, ${2:str}, ${3:offset}${4:, ${5:length}${6:, ${7:case_sensitivity}}})
endsnippet

snippet substr_count "Count the number of substring occurrences" i
substr_count(${1:haystack}, ${2:needle}${3:, ${4:offset}${5:, ${6:length}}})
endsnippet

snippet substr_replace "Replace text within a portion of a string" i
substr_replace(${1:str}, ${2:replace}, ${3:start}${4:, ${5:length}})
endsnippet

snippet symlink "Creates a symbolic link" i
symlink(${1:target}, ${2:link})
endsnippet

snippet sys_get_temp_dir "Returns directory path used for temporary files" i
sys_get_temp_dir()
endsnippet

snippet sys_getloadavg "Gets system load average" i
sys_getloadavg()
endsnippet

snippet syslog "Generate a system log message" i
syslog(${1:priority}, ${2:message})
endsnippet

snippet system "Execute an external program and display the output" i
system(${1:command}${2:, ${3:&return_value}})
endsnippet

snippet tan "Tangent" i
tan(${1:number})
endsnippet

snippet tanh "Hyperbolic tangent" i
tanh(${1:number})
endsnippet

snippet tempnam "Create file with unique file name" i
tempnam(${1:dir}, ${2:prefix})
endsnippet

snippet textdomain "Sets the default domain" i
textdomain(${1:domain})
endsnippet

snippet tidy_access_count "Returns the Number of Tidy accessibility warnings encountered for specified document" i
tidy_access_count(${1:object})
endsnippet

snippet tidy_clean_repair "" i
tidy_clean_repair(${1:object})
endsnippet

snippet tidy_config_count "Returns the Number of Tidy configuration errors encountered for specified document" i
tidy_config_count(${1:object})
endsnippet

snippet tidy_diagnose "Run configured diagnostics on parsed and repaired markup" i
tidy_diagnose(${1:object})
endsnippet

snippet tidy_error_count "Returns the Number of Tidy errors encountered for specified document" i
tidy_error_count(${1:object})
endsnippet

snippet tidy_get_body "" i
tidy_get_body(${1:tidy})
endsnippet

snippet tidy_get_config "" i
tidy_get_config(${1:object})
endsnippet

snippet tidy_get_error_buffer "" i
tidy_get_error_buffer(${1:object})
endsnippet

snippet tidy_get_head "" i
tidy_get_head()
endsnippet

snippet tidy_get_html "" i
tidy_get_html()
endsnippet

snippet tidy_get_html_ver "" i
tidy_get_html_ver(${1:object})
endsnippet

snippet tidy_get_opt_doc "" i
tidy_get_opt_doc(${1:resource}, ${2:optname})
endsnippet

snippet tidy_get_output "Return a string representing the parsed tidy markup" i
tidy_get_output(${1:object})
endsnippet

snippet tidy_get_release "" i
tidy_get_release()
endsnippet

snippet tidy_get_root "" i
tidy_get_root()
endsnippet

snippet tidy_get_status "" i
tidy_get_status(${1:object})
endsnippet

snippet tidy_getopt "Returns the value of the specified configuration option for the tidy document" i
tidy_getopt(${1:option})
endsnippet

snippet tidy_is_xhtml "" i
tidy_is_xhtml(${1:object})
endsnippet

snippet tidy_is_xml "" i
tidy_is_xml(${1:object})
endsnippet

snippet tidy_parse_file "" i
tidy_parse_file(${1:file}${2:, ${3:config_options}${4:, ${5:encoding}${6:, ${7:use_include_path}}}})
endsnippet

snippet tidy_parse_string "" i
tidy_parse_string(${1:input}${2:, ${3:config_options}${4:, ${5:encoding}}})
endsnippet

snippet tidy_repair_file "" i
tidy_repair_file(${1:filename}${2:, ${3:config_file}${4:, ${5:encoding}${6:, ${7:use_include_path}}}})
endsnippet

snippet tidy_repair_string "" i
tidy_repair_string(${1:data}${2:, ${3:config_file}${4:, ${5:encoding}}})
endsnippet

snippet tidy_warning_count "Returns the Number of Tidy warnings encountered for specified document" i
tidy_warning_count(${1:object})
endsnippet

snippet time "Return current Unix timestamp" i
time()
endsnippet

snippet time_nanosleep "Delay for a number of seconds and nanoseconds" i
time_nanosleep(${1:seconds}, ${2:nanoseconds})
endsnippet

snippet time_sleep_until "Make the script sleep until the specified time" i
time_sleep_until(${1:timestamp})
endsnippet

snippet timezone_abbreviations_list "Alias of DateTimeZone::listAbbreviations()" i
timezone_abbreviations_list()
endsnippet

snippet timezone_identifiers_list "Alias of DateTimeZone::listIdentifiers()" i
timezone_identifiers_list(${1:what}${2:, ${3:country}})
endsnippet

snippet timezone_location_get "Alias of DateTimeZone::getLocation()" i
timezone_location_get(${1:object})
endsnippet

snippet timezone_name_from_abbr "Returns the timezone name from abbreviation" i
timezone_name_from_abbr(${1:abbr}${2:, ${3:gmtoffset}${4:, ${5:isdst}}})
endsnippet

snippet timezone_name_get "Alias of DateTimeZone::getName()" i
timezone_name_get(${1:object})
endsnippet

snippet timezone_offset_get "Alias of DateTimeZone::getOffset()" i
timezone_offset_get(${1:object}, ${2:datetime})
endsnippet

snippet timezone_open "Alias of DateTimeZone::__construct()" i
timezone_open(${1:timezone})
endsnippet

snippet timezone_transitions_get "Alias of DateTimeZone::getTransitions()" i
timezone_transitions_get(${1:object}${2:, ${3:timestamp_begin}${4:, ${5:timestamp_end}}})
endsnippet

snippet timezone_version_get "Gets the version of the timezonedb" i
timezone_version_get()
endsnippet

snippet tmpfile "Creates a temporary file" i
tmpfile()
endsnippet

snippet token_get_all "Split given source into PHP tokens" i
token_get_all(${1:source}${2:, ${3:flags}})
endsnippet

snippet token_name "Get the symbolic name of a given PHP token" i
token_name(${1:token})
endsnippet

snippet touch "Sets access and modification time of file" i
touch(${1:filename}${2:, ${3:time}${4:, ${5:atime}}})
endsnippet

snippet trait_exists "Checks if the trait exists" i
trait_exists(${1:traitname}${2:, ${3:autoload}})
endsnippet

snippet transliterator_create "Create a transliterator" i
transliterator_create(${1:id}${2:, ${3:direction}})
endsnippet

snippet transliterator_create_from_rules "" i
transliterator_create_from_rules(${1:rules}${2:, ${3:direction}})
endsnippet

snippet transliterator_create_inverse "" i
transliterator_create_inverse(${1:orig_trans})
endsnippet

snippet transliterator_get_error_code "" i
transliterator_get_error_code(${1:trans})
endsnippet

snippet transliterator_get_error_message "" i
transliterator_get_error_message(${1:trans})
endsnippet

snippet transliterator_list_ids "" i
transliterator_list_ids()
endsnippet

snippet transliterator_transliterate "Transliterate a string" i
transliterator_transliterate(${1:trans}, ${2:subject}${3:, ${4:start}${5:, ${6:end}}})
endsnippet

snippet trigger_error "Generates a user-level error/warning/notice message" i
trigger_error(${1:message}${2:, ${3:error_type}})
endsnippet

snippet trim "Strip whitespace (or other characters) from the beginning and end of a string" i
trim(${1:str}${2:, ${3:character_mask}})
endsnippet

snippet uasort "Sort an array with a user-defined comparison function and maintain index association" i
uasort(${1:&arg}, ${2:cmp_function})
endsnippet

snippet ucfirst "Make a string's first character uppercase" i
ucfirst(${1:str})
endsnippet

snippet ucwords "Uppercase the first character of each word in a string" i
ucwords(${1:str}${2:, ${3:delimiters}})
endsnippet

snippet uksort "Sort an array by keys using a user-defined comparison function" i
uksort(${1:&arg}, ${2:cmp_function})
endsnippet

snippet umask "Changes the current umask" i
umask(${1:mask})
endsnippet

snippet uniqid "Generate a unique ID" i
uniqid(${1:prefix}${2:, ${3:more_entropy}})
endsnippet

snippet unixtojd "Convert Unix timestamp to Julian Day" i
unixtojd(${1:timestamp})
endsnippet

snippet unlink "Deletes a file" i
unlink(${1:filename}${2:, ${3:context}})
endsnippet

snippet unpack "Unpack data from binary string" i
unpack(${1:format}, ${2:input}${3:, ${4:offset}})
endsnippet

snippet unregister_tick_function "De-register a function for execution on each tick" i
unregister_tick_function(${1:function_name})
endsnippet

snippet unserialize "Creates a PHP value from a stored representation" i
unserialize(${1:variable_representation}${2:, ${3:allowed_classes}})
endsnippet

snippet urldecode "Decodes URL-encoded string" i
urldecode(${1:str})
endsnippet

snippet urlencode "URL-encodes string" i
urlencode(${1:str})
endsnippet

snippet use_soap_error_handler "Set whether to use the SOAP error handler" i
use_soap_error_handler(${1:handler})
endsnippet

snippet user_error "Alias of trigger_error()" i
user_error(${1:message}${2:, ${3:error_type}})
endsnippet

snippet usleep "Delay execution in microseconds" i
usleep(${1:micro_seconds})
endsnippet

snippet usort "Sort an array by values using a user-defined comparison function" i
usort(${1:&arg}, ${2:cmp_function})
endsnippet

snippet utf8_decode "Converts a string with ISO-8859-1 characters encoded with UTF-8 to single-byte ISO-8859-1" i
utf8_decode(${1:data})
endsnippet

snippet utf8_encode "Encodes an ISO-8859-1 string to UTF-8" i
utf8_encode(${1:data})
endsnippet

snippet var_dump "Dumps information about a variable" i
var_dump(${1:vars})
endsnippet

snippet var_export "Outputs or returns a parsable string representation of a variable" i
var_export(${1:var}${2:, ${3:return}})
endsnippet

snippet version_compare "Compares two PHP-standardized version number strings" i
version_compare(${1:ver1}, ${2:ver2}${3:, ${4:oper}})
endsnippet

snippet vfprintf "Write a formatted string to a stream" i
vfprintf(${1:stream}, ${2:format}, ${3:args})
endsnippet

snippet vprintf "Output a formatted string" i
vprintf(${1:format}, ${2:args})
endsnippet

snippet vsprintf "Return a formatted string" i
vsprintf(${1:format}, ${2:args})
endsnippet

snippet wddx_add_vars "Add variables to a WDDX packet with the specified ID" i
wddx_add_vars(${1:packet_id}, ${2:var_names})
endsnippet

snippet wddx_deserialize "Unserializes a WDDX packet" i
wddx_deserialize(${1:packet})
endsnippet

snippet wddx_packet_end "Ends a WDDX packet with the specified ID" i
wddx_packet_end(${1:packet_id})
endsnippet

snippet wddx_packet_start "Starts a new WDDX packet with structure inside it" i
wddx_packet_start(${1:comment})
endsnippet

snippet wddx_serialize_value "Serialize a single value into a WDDX packet" i
wddx_serialize_value(${1:var}${2:, ${3:comment}})
endsnippet

snippet wddx_serialize_vars "Serialize variables into a WDDX packet" i
wddx_serialize_vars(${1:var_names})
endsnippet

snippet wordwrap "Wraps a string to a given number of characters" i
wordwrap(${1:str}${2:, ${3:width}${4:, ${5:break}${6:, ${7:cut}}}})
endsnippet

snippet xdebug_break "" i
xdebug_break()
endsnippet

snippet xdebug_call_class "" i
xdebug_call_class(${1:depth})
endsnippet

snippet xdebug_call_file "" i
xdebug_call_file(${1:depth})
endsnippet

snippet xdebug_call_function "" i
xdebug_call_function(${1:depth})
endsnippet

snippet xdebug_call_line "" i
xdebug_call_line(${1:depth})
endsnippet

snippet xdebug_clear_aggr_profiling_data "" i
xdebug_clear_aggr_profiling_data()
endsnippet

snippet xdebug_code_coverage_started "" i
xdebug_code_coverage_started()
endsnippet

snippet xdebug_debug_zval "" i
xdebug_debug_zval(${1:var})
endsnippet

snippet xdebug_debug_zval_stdout "" i
xdebug_debug_zval_stdout(${1:var})
endsnippet

snippet xdebug_disable "" i
xdebug_disable()
endsnippet

snippet xdebug_dump_aggr_profiling_data "" i
xdebug_dump_aggr_profiling_data(${1:prefix})
endsnippet

snippet xdebug_dump_superglobals "" i
xdebug_dump_superglobals()
endsnippet

snippet xdebug_enable "" i
xdebug_enable()
endsnippet

snippet xdebug_get_code_coverage "" i
xdebug_get_code_coverage()
endsnippet

snippet xdebug_get_collected_errors "" i
xdebug_get_collected_errors(${1:clear})
endsnippet

snippet xdebug_get_declared_vars "" i
xdebug_get_declared_vars()
endsnippet

snippet xdebug_get_formatted_function_stack "" i
xdebug_get_formatted_function_stack()
endsnippet

snippet xdebug_get_function_count "" i
xdebug_get_function_count()
endsnippet

snippet xdebug_get_function_stack "" i
xdebug_get_function_stack()
endsnippet

snippet xdebug_get_gc_run_count "" i
xdebug_get_gc_run_count()
endsnippet

snippet xdebug_get_gc_total_collected_roots "" i
xdebug_get_gc_total_collected_roots()
endsnippet

snippet xdebug_get_gcstats_filename "" i
xdebug_get_gcstats_filename()
endsnippet

snippet xdebug_get_headers "" i
xdebug_get_headers()
endsnippet

snippet xdebug_get_monitored_functions "" i
xdebug_get_monitored_functions(${1:clear})
endsnippet

snippet xdebug_get_profiler_filename "" i
xdebug_get_profiler_filename()
endsnippet

snippet xdebug_get_stack_depth "" i
xdebug_get_stack_depth()
endsnippet

snippet xdebug_get_tracefile_name "" i
xdebug_get_tracefile_name()
endsnippet

snippet xdebug_is_debugger_active "" i
xdebug_is_debugger_active()
endsnippet

snippet xdebug_is_enabled "" i
xdebug_is_enabled()
endsnippet

snippet xdebug_memory_usage "" i
xdebug_memory_usage()
endsnippet

snippet xdebug_peak_memory_usage "" i
xdebug_peak_memory_usage()
endsnippet

snippet xdebug_print_function_stack "" i
xdebug_print_function_stack(${1:message}${2:, ${3:options}})
endsnippet

snippet xdebug_set_filter "" i
xdebug_set_filter(${1:filter_group}, ${2:filter_type}, ${3:array_of_filters})
endsnippet

snippet xdebug_start_code_coverage "" i
xdebug_start_code_coverage(${1:options})
endsnippet

snippet xdebug_start_error_collection "" i
xdebug_start_error_collection()
endsnippet

snippet xdebug_start_function_monitor "" i
xdebug_start_function_monitor(${1:functions_to_monitor})
endsnippet

snippet xdebug_start_gcstats "" i
xdebug_start_gcstats(${1:fname})
endsnippet

snippet xdebug_start_trace "" i
xdebug_start_trace(${1:fname}${2:, ${3:options}})
endsnippet

snippet xdebug_stop_code_coverage "" i
xdebug_stop_code_coverage(${1:cleanup})
endsnippet

snippet xdebug_stop_error_collection "" i
xdebug_stop_error_collection()
endsnippet

snippet xdebug_stop_function_monitor "" i
xdebug_stop_function_monitor()
endsnippet

snippet xdebug_stop_gcstats "" i
xdebug_stop_gcstats()
endsnippet

snippet xdebug_stop_trace "" i
xdebug_stop_trace()
endsnippet

snippet xdebug_time_index "" i
xdebug_time_index()
endsnippet

snippet xdebug_var_dump "" i
xdebug_var_dump(${1:var})
endsnippet

snippet xml_error_string "Get XML parser error string" i
xml_error_string(${1:code})
endsnippet

snippet xml_get_current_byte_index "Get current byte index for an XML parser" i
xml_get_current_byte_index(${1:parser})
endsnippet

snippet xml_get_current_column_number "Get current column number for an XML parser" i
xml_get_current_column_number(${1:parser})
endsnippet

snippet xml_get_current_line_number "Get current line number for an XML parser" i
xml_get_current_line_number(${1:parser})
endsnippet

snippet xml_get_error_code "Get XML parser error code" i
xml_get_error_code(${1:parser})
endsnippet

snippet xml_parse "Start parsing an XML document" i
xml_parse(${1:parser}, ${2:data}${3:, ${4:isfinal}})
endsnippet

snippet xml_parse_into_struct "Parse XML data into an array structure" i
xml_parse_into_struct(${1:parser}, ${2:data}, ${3:&values}${4:, ${5:&index}})
endsnippet

snippet xml_parser_create "Create an XML parser" i
xml_parser_create(${1:encoding})
endsnippet

snippet xml_parser_create_ns "Create an XML parser with namespace support" i
xml_parser_create_ns(${1:encoding}${2:, ${3:sep}})
endsnippet

snippet xml_parser_free "Free an XML parser" i
xml_parser_free(${1:parser})
endsnippet

snippet xml_parser_get_option "Get options from an XML parser" i
xml_parser_get_option(${1:parser}, ${2:option})
endsnippet

snippet xml_parser_set_option "Set options in an XML parser" i
xml_parser_set_option(${1:parser}, ${2:option}, ${3:value})
endsnippet

snippet xml_set_character_data_handler "Set up character data handler" i
xml_set_character_data_handler(${1:parser}, ${2:hdl})
endsnippet

snippet xml_set_default_handler "Set up default handler" i
xml_set_default_handler(${1:parser}, ${2:hdl})
endsnippet

snippet xml_set_element_handler "Set up start and end element handlers" i
xml_set_element_handler(${1:parser}, ${2:shdl}, ${3:ehdl})
endsnippet

snippet xml_set_end_namespace_decl_handler "Set up end namespace declaration handler" i
xml_set_end_namespace_decl_handler(${1:parser}, ${2:hdl})
endsnippet

snippet xml_set_external_entity_ref_handler "Set up external entity reference handler" i
xml_set_external_entity_ref_handler(${1:parser}, ${2:hdl})
endsnippet

snippet xml_set_notation_decl_handler "Set up notation declaration handler" i
xml_set_notation_decl_handler(${1:parser}, ${2:hdl})
endsnippet

snippet xml_set_object "Use XML Parser within an object" i
xml_set_object(${1:parser}, ${2:obj})
endsnippet

snippet xml_set_processing_instruction_handler "Set up processing instruction (PI) handler" i
xml_set_processing_instruction_handler(${1:parser}, ${2:hdl})
endsnippet

snippet xml_set_start_namespace_decl_handler "Set up start namespace declaration handler" i
xml_set_start_namespace_decl_handler(${1:parser}, ${2:hdl})
endsnippet

snippet xml_set_unparsed_entity_decl_handler "Set up unparsed entity declaration handler" i
xml_set_unparsed_entity_decl_handler(${1:parser}, ${2:hdl})
endsnippet

snippet xmlrpc_decode "Decodes XML into native PHP types" i
xmlrpc_decode(${1:value}${2:, ${3:encoding}})
endsnippet

snippet xmlrpc_decode_request "Decodes XML into native PHP types" i
xmlrpc_decode_request(${1:xml}, ${2:&method}${3:, ${4:encoding}})
endsnippet

snippet xmlrpc_encode "Generates XML for a PHP value" i
xmlrpc_encode(${1:value})
endsnippet

snippet xmlrpc_encode_request "Generates XML for a method request" i
xmlrpc_encode_request(${1:method}, ${2:params}${3:, ${4:output_options}})
endsnippet

snippet xmlrpc_get_type "Gets xmlrpc type for a PHP value" i
xmlrpc_get_type(${1:value})
endsnippet

snippet xmlrpc_is_fault "Determines if an array value represents an XMLRPC fault" i
xmlrpc_is_fault(${1:arg})
endsnippet

snippet xmlrpc_parse_method_descriptions "Decodes XML into a list of method descriptions" i
xmlrpc_parse_method_descriptions(${1:xml})
endsnippet

snippet xmlrpc_server_add_introspection_data "Adds introspection documentation" i
xmlrpc_server_add_introspection_data(${1:server}, ${2:desc})
endsnippet

snippet xmlrpc_server_call_method "Parses XML requests and call methods" i
xmlrpc_server_call_method(${1:server}, ${2:xml}, ${3:user_data}${4:, ${5:output_options}})
endsnippet

snippet xmlrpc_server_create "Creates an xmlrpc server" i
xmlrpc_server_create()
endsnippet

snippet xmlrpc_server_destroy "Destroys server resources" i
xmlrpc_server_destroy(${1:server})
endsnippet

snippet xmlrpc_server_register_introspection_callback "Register a PHP function to generate documentation" i
xmlrpc_server_register_introspection_callback(${1:server}, ${2:function})
endsnippet

snippet xmlrpc_server_register_method "Register a PHP function to resource method matching method_name" i
xmlrpc_server_register_method(${1:server}, ${2:method_name}, ${3:function})
endsnippet

snippet xmlrpc_set_type "Sets xmlrpc type, base64 or datetime, for a PHP string value" i
xmlrpc_set_type(${1:&value}, ${2:type})
endsnippet

snippet xmlwriter_end_attribute "End attribute" i
xmlwriter_end_attribute(${1:xmlwriter})
endsnippet

snippet xmlwriter_end_cdata "End current CDATA" i
xmlwriter_end_cdata(${1:xmlwriter})
endsnippet

snippet xmlwriter_end_comment "Create end comment" i
xmlwriter_end_comment(${1:xmlwriter})
endsnippet

snippet xmlwriter_end_document "End current document" i
xmlwriter_end_document(${1:xmlwriter})
endsnippet

snippet xmlwriter_end_dtd "End current DTD" i
xmlwriter_end_dtd(${1:xmlwriter})
endsnippet

snippet xmlwriter_end_dtd_attlist "End current DTD AttList" i
xmlwriter_end_dtd_attlist(${1:xmlwriter})
endsnippet

snippet xmlwriter_end_dtd_element "End current DTD element" i
xmlwriter_end_dtd_element(${1:xmlwriter})
endsnippet

snippet xmlwriter_end_dtd_entity "End current DTD Entity" i
xmlwriter_end_dtd_entity(${1:xmlwriter})
endsnippet

snippet xmlwriter_end_element "End current element" i
xmlwriter_end_element(${1:xmlwriter})
endsnippet

snippet xmlwriter_end_pi "End current PI" i
xmlwriter_end_pi(${1:xmlwriter})
endsnippet

snippet xmlwriter_flush "Flush current buffer" i
xmlwriter_flush(${1:xmlwriter}${2:, ${3:empty}})
endsnippet

snippet xmlwriter_full_end_element "End current element" i
xmlwriter_full_end_element(${1:xmlwriter})
endsnippet

snippet xmlwriter_open_memory "Create new xmlwriter using memory for string output" i
xmlwriter_open_memory()
endsnippet

snippet xmlwriter_open_uri "Create new xmlwriter using source uri for output" i
xmlwriter_open_uri(${1:uri})
endsnippet

snippet xmlwriter_output_memory "Returns current buffer" i
xmlwriter_output_memory(${1:xmlwriter}${2:, ${3:flush}})
endsnippet

snippet xmlwriter_set_indent "Toggle indentation on/off" i
xmlwriter_set_indent(${1:xmlwriter}, ${2:indent})
endsnippet

snippet xmlwriter_set_indent_string "Set string used for indenting" i
xmlwriter_set_indent_string(${1:xmlwriter}, ${2:indentString})
endsnippet

snippet xmlwriter_start_attribute "Create start attribute" i
xmlwriter_start_attribute(${1:xmlwriter}, ${2:name})
endsnippet

snippet xmlwriter_start_attribute_ns "Create start namespaced attribute" i
xmlwriter_start_attribute_ns(${1:xmlwriter}, ${2:prefix}, ${3:name}, ${4:uri})
endsnippet

snippet xmlwriter_start_cdata "Create start CDATA tag" i
xmlwriter_start_cdata(${1:xmlwriter})
endsnippet

snippet xmlwriter_start_comment "Create start comment" i
xmlwriter_start_comment(${1:xmlwriter})
endsnippet

snippet xmlwriter_start_document "Create document tag" i
xmlwriter_start_document(${1:xmlwriter}${2:, ${3:version}${4:, ${5:encoding}${6:, ${7:standalone}}}})
endsnippet

snippet xmlwriter_start_dtd "Create start DTD tag" i
xmlwriter_start_dtd(${1:xmlwriter}, ${2:qualifiedName}${3:, ${4:publicId}${5:, ${6:systemId}}})
endsnippet

snippet xmlwriter_start_dtd_attlist "Create start DTD AttList" i
xmlwriter_start_dtd_attlist(${1:xmlwriter}, ${2:name})
endsnippet

snippet xmlwriter_start_dtd_element "Create start DTD element" i
xmlwriter_start_dtd_element(${1:xmlwriter}, ${2:qualifiedName})
endsnippet

snippet xmlwriter_start_dtd_entity "Create start DTD Entity" i
xmlwriter_start_dtd_entity(${1:xmlwriter}, ${2:name}, ${3:isparam})
endsnippet

snippet xmlwriter_start_element "Create start element tag" i
xmlwriter_start_element(${1:xmlwriter}, ${2:name})
endsnippet

snippet xmlwriter_start_element_ns "Create start namespaced element tag" i
xmlwriter_start_element_ns(${1:xmlwriter}, ${2:prefix}, ${3:name}, ${4:uri})
endsnippet

snippet xmlwriter_start_pi "Create start PI tag" i
xmlwriter_start_pi(${1:xmlwriter}, ${2:target})
endsnippet

snippet xmlwriter_text "Write text" i
xmlwriter_text(${1:xmlwriter}, ${2:content})
endsnippet

snippet xmlwriter_write_attribute "Write full attribute" i
xmlwriter_write_attribute(${1:xmlwriter}, ${2:name}, ${3:value})
endsnippet

snippet xmlwriter_write_attribute_ns "Write full namespaced attribute" i
xmlwriter_write_attribute_ns(${1:xmlwriter}, ${2:prefix}, ${3:name}, ${4:uri}, ${5:content})
endsnippet

snippet xmlwriter_write_cdata "Write full CDATA tag" i
xmlwriter_write_cdata(${1:xmlwriter}, ${2:content})
endsnippet

snippet xmlwriter_write_comment "Write full comment tag" i
xmlwriter_write_comment(${1:xmlwriter}, ${2:content})
endsnippet

snippet xmlwriter_write_dtd "Write full DTD tag" i
xmlwriter_write_dtd(${1:xmlwriter}, ${2:name}${3:, ${4:publicId}${5:, ${6:systemId}${7:, ${8:subset}}}})
endsnippet

snippet xmlwriter_write_dtd_attlist "Write full DTD AttList tag" i
xmlwriter_write_dtd_attlist(${1:xmlwriter}, ${2:name}, ${3:content})
endsnippet

snippet xmlwriter_write_dtd_element "Write full DTD element tag" i
xmlwriter_write_dtd_element(${1:xmlwriter}, ${2:name}, ${3:content})
endsnippet

snippet xmlwriter_write_dtd_entity "Write full DTD Entity tag" i
xmlwriter_write_dtd_entity(${1:xmlwriter}, ${2:name}, ${3:content})
endsnippet

snippet xmlwriter_write_element "Write full element tag" i
xmlwriter_write_element(${1:xmlwriter}, ${2:name}${3:, ${4:content}})
endsnippet

snippet xmlwriter_write_element_ns "Write full namespaced element tag" i
xmlwriter_write_element_ns(${1:xmlwriter}, ${2:prefix}, ${3:name}, ${4:uri}${5:, ${6:content}})
endsnippet

snippet xmlwriter_write_pi "Writes a PI" i
xmlwriter_write_pi(${1:xmlwriter}, ${2:target}, ${3:content})
endsnippet

snippet xmlwriter_write_raw "Write a raw XML text" i
xmlwriter_write_raw(${1:xmlwriter}, ${2:content})
endsnippet

snippet zend_version "Gets the version of the current Zend engine" i
zend_version()
endsnippet

snippet zip_close "Close a ZIP file archive" i
zip_close(${1:zip})
endsnippet

snippet zip_entry_close "Close a directory entry" i
zip_entry_close(${1:zip_ent})
endsnippet

snippet zip_entry_compressedsize "Retrieve the compressed size of a directory entry" i
zip_entry_compressedsize(${1:zip_entry})
endsnippet

snippet zip_entry_compressionmethod "Retrieve the compression method of a directory entry" i
zip_entry_compressionmethod(${1:zip_entry})
endsnippet

snippet zip_entry_filesize "Retrieve the actual file size of a directory entry" i
zip_entry_filesize(${1:zip_entry})
endsnippet

snippet zip_entry_name "Retrieve the name of a directory entry" i
zip_entry_name(${1:zip_entry})
endsnippet

snippet zip_entry_open "Open a directory entry for reading" i
zip_entry_open(${1:zip_dp}, ${2:zip_entry}${3:, ${4:mode}})
endsnippet

snippet zip_entry_read "Read from an open directory entry" i
zip_entry_read(${1:zip_entry}${2:, ${3:len}})
endsnippet

snippet zip_open "Open a ZIP file archive" i
zip_open(${1:filename})
endsnippet

snippet zip_read "Read next entry in a ZIP file archive" i
zip_read(${1:zip})
endsnippet

snippet zlib_decode "Uncompress any raw/gzip/zlib encoded data" i
zlib_decode(${1:data}${2:, ${3:max_decoded_len}})
endsnippet

snippet zlib_encode "Compress data with the specified encoding" i
zlib_encode(${1:data}, ${2:encoding}${3:, ${4:level}})
endsnippet

snippet zlib_get_coding_type "Returns the coding type used for output compression" i
zlib_get_coding_type()
endsnippet
